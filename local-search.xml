<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Redis6Learn</title>
    <link href="/2021/06/25/Redis6Learn/"/>
    <url>/2021/06/25/Redis6Learn/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="1、基本数据类型"><a href="#1、基本数据类型" class="headerlink" title="1、基本数据类型"></a>1、基本数据类型</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>redis 中的字符串value最多可以是512m</p><p>关于字符串的操作命令 </p><blockquote><p>set <key>  value </key></p><p>get <key> </key></p><p>append <key>  value  ： 追加 </key></p><p>strlen <key>  ： 获取key长度</key></p><p>setnx  <key>   <value>  :  只有当key不存在时    设置key的值</value></key></p><p>incr <key>   将key中存储的数字+1    只能对数字值操作，如果为空，新增值为1 （是原子性操作 ）</key></p><p>decr  <key>  将key 中的数字 - 1</key></p></blockquote><p>多个key 和 value的操作 </p><blockquote><p> mset <key> <value> <key> <value>  </value></key></value></key></p><p>原子性操作</p><p>msetnx  <key> <value> <key> <value>   : 如果key中有之前存在过的  则不会设置成功</value></key></value></key></p><p>setrange   <key>    <start>   <value> :   设置key 从start开始往后的所有值都是value</value></start></key></p><p>setex <key> <seconds>  <value>  :    设置过期时间   </value></seconds></key></p></blockquote><blockquote><p>mget <key> <value> <key> <value> </value></key></value></key></p><p>getrange <key>  start  end  :  设置起始位置  类似于SubString    包含 start 和 end </key></p><p>getset <key>  <value>  : 以新值换旧值</value></key></p></blockquote><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>特点 ： 单键多值</p><p>底层是一个双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能较差</p><p>常用命令 ：</p><blockquote><p>lpush / rpush <key>  <value>  <value>   <value>  </value></value></value></key></p><p> 一个key 多个value  从左边或者是右边插入一个或者是多个值 </p></blockquote><blockquote><p>ipop/rpop <key>  ： 从左边、右边弹出一个值， 值在键在，值亡键亡 </key></p></blockquote><blockquote><p>rpoplpush <key>  <key1>  ： 从 key 右边弹出一个值  放入key1的左边 </key1></key></p></blockquote><blockquote><p>lrange  <key>  <start>  <end>  ： 从左到右，按照下标获得元素</end></start></key></p><p>lrange  <key>   0   -1 ：  遍历所有的值</key></p><p>lindex   <key>  <index>  :   从左到右 ， 去key中下标index中的值</index></key></p><p>llen  <key>  ： 获取key长度</key></p></blockquote><p><img src="/2021/06/25/Redis6Learn/image-20210625211038918.png" alt="image-20210625211038918"></p><p>注意  before 是在前面的意思    图中有失误</p><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>特点 ： 无需，不存储重复数据 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash">192.168.1.57:6379&gt; sadd k1 v1 v2 v3    : 往<span class="hljs-built_in">set</span>集合添加值 <br>(<span class="hljs-built_in">integer</span>) 3     <br>192.168.1.57:6379&gt; smembers k1    : 遍历<span class="hljs-built_in">set</span>集合<br>1) <span class="hljs-string">&quot;v2&quot;</span><br>2) <span class="hljs-string">&quot;v1&quot;</span><br>3) <span class="hljs-string">&quot;v3&quot;</span><br>192.168.1.57:6379&gt; sismember k1 v1    : 检测key里面有没有v1<br>(<span class="hljs-built_in">integer</span>) 1<br>192.168.1.57:6379&gt; sismember k1 v3<br>(<span class="hljs-built_in">integer</span>) 1<br>192.168.1.57:6379&gt; scard k1    : 获取<span class="hljs-built_in">set</span>集合长度<br>(<span class="hljs-built_in">integer</span>) 3<br>192.168.1.57:6379&gt; srem k1 v1    :  指定value 弹出 key<br>(<span class="hljs-built_in">integer</span>) 1<br>192.168.1.57:6379&gt; smembers k1  <br>1) <span class="hljs-string">&quot;v2&quot;</span><br>2) <span class="hljs-string">&quot;v3&quot;</span><br>192.168.1.57:6379&gt; spop k1   : 随机弹出一个数据  <br><span class="hljs-string">&quot;v3&quot;</span><br>192.168.1.57:6379&gt; srandmember k1 2    : 从key中随机取俩个值  不会删除数据<br><br>192.168.1.57:6379&gt; smove k1 k2 v2<br>(<span class="hljs-built_in">integer</span>) 1<br>192.168.1.57:6379&gt; smembers k2<br>1) <span class="hljs-string">&quot;v2&quot;</span><br>2) <span class="hljs-string">&quot;4&quot;</span><br>3) <span class="hljs-string">&quot;3&quot;</span><br>4) <span class="hljs-string">&quot;1&quot;</span><br>192.168.1.57:6379&gt; sinter k1 k2  : 取俩个结合交集<br>(empty list or <span class="hljs-built_in">set</span>)<br>192.168.1.57:6379&gt;  sunion k1 k2  : 取俩个集合并集<br>1) <span class="hljs-string">&quot;4&quot;</span><br>2) <span class="hljs-string">&quot;v2&quot;</span><br>3) <span class="hljs-string">&quot;1&quot;</span><br>4) <span class="hljs-string">&quot;3&quot;</span><br>192.168.1.57:6379&gt; sdiff k1 k2  : 取俩个集合差集<br>(empty list or <span class="hljs-built_in">set</span>)<br></code></pre></td></tr></table></figure><p>底层数据结构，就是用hash表去除value字段 用filed做value</p><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><p>特点 ： key  -&gt; value</p><p>关系映射图 ： </p><p><img src="/2021/06/25/Redis6Learn/image-20210625215237439.png" alt="image-20210625215237439"></p><p>常用命令 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">192.168.1.57:6379&gt; hset user:1001 id 1  <span class="hljs-comment"># 创建hash &lt;key&gt;  field value </span><br>(<span class="hljs-built_in">integer</span>) 1<br>192.168.1.57:6379&gt; hset user:1001 name zhangshan  <span class="hljs-comment"># 添加 属性 </span><br>(<span class="hljs-built_in">integer</span>) 1<br>192.168.1.57:6379&gt; hget user:1001 id   <span class="hljs-comment"># 通过filed 获取key中的value</span><br><span class="hljs-string">&quot;1&quot;</span><br>192.168.1.57:6379&gt; hmset user:1001 age 10 danger 12 <span class="hljs-comment"># 批量添加filed 和 value </span><br>OK<br>192.168.1.57:6379&gt; hexists user:1001 id <span class="hljs-comment"># 判断key中是否有这个属性</span><br>(<span class="hljs-built_in">integer</span>) 1<br>192.168.1.57:6379&gt;<br>192.168.1.57:6379&gt; hkeys user:1001 <span class="hljs-comment"># 获取key中所有的属性 </span><br>1) <span class="hljs-string">&quot;id&quot;</span><br>2) <span class="hljs-string">&quot;name&quot;</span><br>3) <span class="hljs-string">&quot;age&quot;</span><br>4) <span class="hljs-string">&quot;danger&quot;</span><br>192.168.1.57:6379&gt; hvals user:1001  <span class="hljs-comment"># 获取key中所有的值</span><br>1) <span class="hljs-string">&quot;1&quot;</span><br>2) <span class="hljs-string">&quot;zhangshan&quot;</span><br>3) <span class="hljs-string">&quot;10&quot;</span><br>4) <span class="hljs-string">&quot;12&quot;</span><br>192.168.1.57:6379&gt; hincrby user:1001 age 2 <span class="hljs-comment"># 获取key中filed 属性加 2 </span><br>(<span class="hljs-built_in">integer</span>) 12<br>192.168.1.57:6379&gt;  hsetnx user:1001 age 222 <span class="hljs-comment"># 如果key中有这个filed则添加失败否则成功</span><br>(<span class="hljs-built_in">integer</span>) 0<br></code></pre></td></tr></table></figure><h3 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h3><p>底层数据结构</p><h2 id="2、常用命令"><a href="#2、常用命令" class="headerlink" title="2、常用命令"></a>2、常用命令</h2><p>创建key :  set  key  value</p><p>查看所有key  : keys *</p><p>判断key是否存在 ： exists key</p><p>查看key类型 ： type key </p><p>删除key : del  key</p><p>阻塞删除key :  unlink  key  </p><p>设置key的过期时间  : expire  key </p><p>查看key的剩余时间 ： ttl   key    -1表示永不过期   -2 表示已经过期 </p><p>切换数据库   ： select   index   </p><p>查看数据库中的key 数量 ： dbsize</p><h2 id="3、Redis发布和订阅"><a href="#3、Redis发布和订阅" class="headerlink" title="3、Redis发布和订阅"></a>3、Redis发布和订阅</h2><h3 id="3-1、-什么是发布和订阅"><a href="#3-1、-什么是发布和订阅" class="headerlink" title="3.1、 什么是发布和订阅"></a>3.1、 什么是发布和订阅</h3><blockquote><p>是一种消息通信模式： 发布者发送消息，订阅者接收消息</p></blockquote><h3 id="3-2、-Redis发布和订阅"><a href="#3-2、-Redis发布和订阅" class="headerlink" title="3.2、 Redis发布和订阅"></a>3.2、 Redis发布和订阅</h3><p>订阅端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">192.168.1.57:6379&gt; subscribe channel  <span class="hljs-comment"># 订阅频道命令 </span><br>Reading messages... (press Ctrl-C to quit)<br>1) <span class="hljs-string">&quot;subscribe&quot;</span><br>2) <span class="hljs-string">&quot;channel&quot;</span><br>3) (<span class="hljs-built_in">integer</span>) 1<br>1) <span class="hljs-string">&quot;message&quot;</span><br>2) <span class="hljs-string">&quot;channel&quot;</span><br>3) <span class="hljs-string">&quot;hello&quot;</span><br></code></pre></td></tr></table></figure><p>发布端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">192.168.1.57:6379&gt; publish channel <span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-comment"># 向频道中发送信息</span><br>(<span class="hljs-built_in">integer</span>) 1<br>192.168.1.57:6379&gt;<br></code></pre></td></tr></table></figure><h2 id="4、Redis6-新数据类型"><a href="#4、Redis6-新数据类型" class="headerlink" title="4、Redis6 新数据类型"></a>4、Redis6 新数据类型</h2><h4 id="4-1、bitmaps"><a href="#4-1、bitmaps" class="headerlink" title="4.1、bitmaps"></a>4.1、bitmaps</h4><p>什么是bitmaps</p><blockquote><p>Bitmaps并不是实际的数据类型，而是定义在String类型上的一个面向字节操作的集合。因为字符串是二进制安全的块，他们的最大长度是512M。</p></blockquote><blockquote><p>字节操作可以分为两类：恒定时间的单个字节操作如将一个字节设置为1或者0、或者获取一个字节的值，和批量字节操作如在给定的字节范围内计算设置字节的数量。</p></blockquote><p> <img src="/2021/06/25/Redis6Learn/image-20210626124901895.png" alt="image-20210626124901895"></p><p>Redis中bitmaps的常用操作<br>基本使用<br>Redis 的位数组是自动扩展，如果设置了某个偏移位置超出了现有的内容范围，就会自动将位数组进行零扩充。</p><ol><li>setbit key offset value</li><li>getbit key offset</li></ol><ol start="3"><li><p>bitcount key [start end]</p></li><li><p>bitpos key targetBit [start] [end] （起始版本：2.8.7）</p></li></ol><p>计算位图指定范围（start到end，单位为字节，如果不指定就是获取全部）第一个偏移量对应的值等于targetBit的位置。</p><ol start="5"><li>bitop and|or|not|xor destkey key [key…]</li></ol><p>做多个bitmap的and（交集）、or（并集）、not（非）、xor（异或）操作并将结果保存到destkey中。</p><p>Redis 的位数组是自动扩展，如果设置了某个偏移位置超出了现有的内容范围，就会自动将位数组进行零扩充。</p><p>6.魔术指令 bitfield</p><p>前文我们设置 (setbit) 和获取 (getbit) 指定位的值都是单个位的，如果要一次操作多个位，就必须使用管道来处理。</p><p>不过 Redis 的 3.2 版本以后新增了一个功能强大的指令，有了这条指令，不用管道也可以一次进行多个位的操作。</p><p>bitfield 有三个子指令，分别是 get/set/incrby，它们都可以对指定位片段进行读写，但是最多只能处理 64 个连续的位，如果超过 64 位，就得使用多个子指令，bitfield 可以一次执行多个</p><h4 id="4-2、HyperLogLog"><a href="#4-2、HyperLogLog" class="headerlink" title="4.2、HyperLogLog"></a>4.2、HyperLogLog</h4><p>用途： 用来做基数统计的算法</p><p>常用命令 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1:6379&gt; pfadd program &quot;java&quot;  # 创建HyperLogLog <br>(integer) 1<br>127.0.0.1:6379&gt; pfadd program &quot;php&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; pfadd program &quot;java&quot;  # 如果有相同的则返回0  成功加入返回1<br>(integer) 0<br>127.0.0.1:6379&gt; pfadd program &quot;spring&quot; &quot;mysql&quot; # 添加多个value  <br>(integer) 1<br>127.0.0.1:6379&gt; pfcount program3  # 统计个数<br>(integer) 7<br>127.0.0.1:6379&gt; pfmerge program3 program program1  # 将俩个合并到一个里面去<br>OK<br></code></pre></td></tr></table></figure><h4 id="4-3、Geospatial"><a href="#4-3、Geospatial" class="headerlink" title="4.3、Geospatial"></a>4.3、Geospatial</h4><p>提供了经纬度，查询，范围查询，距离查询，经纬度 hash等常见操作</p><p>常用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1:6379&gt; geoadd china 121.48 41.23 shanghai #  创建geo数据类型<br>(integer) 1<br>127.0.0.1:6379&gt; geopos china shanghai   #  获取<br>1) 1) &quot;121.48000091314315796&quot;<br>   2) &quot;41.23000123535113914&quot;<br>127.0.0.1:6379&gt; geoadd china 106.50 29.53 beijng<br>(integer) 1<br>127.0.0.1:6379&gt; geodist china beijng shanghai  km # 两个地方相隔<br>&quot;1875.9716&quot;<br>127.0.0.1:6379&gt; georadius china 110 30 1000 km # 查找周围范围的value<br>1) &quot;beijng&quot;<br><br></code></pre></td></tr></table></figure><h2 id="5、Redis事务"><a href="#5、Redis事务" class="headerlink" title="5、Redis事务"></a>5、Redis事务</h2><h4 id="5-1、redis事务是什么"><a href="#5-1、redis事务是什么" class="headerlink" title="5.1、redis事务是什么"></a>5.1、redis事务是什么</h4><blockquote><p>是一个隔离操作：事务中的所有命令都会序列化，按照顺序执行。事务在执行过程中，不会被其他的客户端发来的请求所打断</p><p>作用：串连多个操作 防止别的命令进行插队</p></blockquote><h4 id="5-2、-事务怎么样使用"><a href="#5-2、-事务怎么样使用" class="headerlink" title="5.2、 事务怎么样使用"></a>5.2、 事务怎么样使用</h4><p>Redis 事务命令   ： </p><p>multi (开启事务) 进入组队模式  </p><p>exec  (执行命令)  执行队列中的命令</p><p>discard (消除命令) ：将队列中的命令清空 关闭事务</p><p><img src="/2021/06/25/Redis6Learn/image-20210626151933051.png" alt="image-20210626151933051"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1:6379&gt; multi  # 开启redis事务 <br>OK<br>127.0.0.1:6379(TX)&gt; set key anzhen  # 将命令放入队列中<br>QUEUED<br>127.0.0.1:6379(TX)&gt; set k1 zimu<br>QUEUED<br>127.0.0.1:6379(TX)&gt; exec  # 将队列的命令一起执行 <br>1) OK<br>2) OK<br>127.0.0.1:6379&gt; <br><br></code></pre></td></tr></table></figure><p>几点注意事项 ： </p><blockquote><p>如果是在组队阶段，命令出现了错误时，所有命令都不会执行 </p><p>如果时在执行阶段，出现了错误时，会继续执行下一条命令</p></blockquote><h4 id="5-3、Redis事务锁机制"><a href="#5-3、Redis事务锁机制" class="headerlink" title="5.3、Redis事务锁机制"></a>5.3、Redis事务锁机制</h4><p>解决事务冲突时用到什么锁  ？？</p><ul><li><p>悲观锁</p><ul><li><blockquote><p>悲观锁(Pessimistic Lock)，顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。</p></blockquote><p>缺点  ——&gt;   效率太低 ：只能一个线程进行操作 </p></li></ul></li><li><p>乐观锁</p><ul><li><blockquote><p>进行操作时，给线程数据加上字段 version，通过版本号判断数据有没有被修改过</p></blockquote></li></ul></li></ul><h4 id="5-4、Redis事务三特性"><a href="#5-4、Redis事务三特性" class="headerlink" title="5.4、Redis事务三特性"></a>5.4、Redis事务三特性</h4><ul><li>不保证原子性 <ul><li>事务中，如果出现错误不会发生回滚 ，而是执行下一条命令</li></ul></li><li>没有隔离级别的概念<ul><li>队列中的命令没有提交之前都不会实际执行，因为事务提交前任何命令都不会实际执行</li></ul></li><li>单独的隔离操作<ul><li>事务中所有的命令都会序列化，按照顺序执行。事务执行的过程中，不会被其他客户端发来的命令请求所打断</li></ul></li></ul><h2 id="6、Redis-主从复制"><a href="#6、Redis-主从复制" class="headerlink" title="6、Redis 主从复制"></a>6、Redis 主从复制</h2><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs smali">port:26379<br>daemonize yes<br>sentinel<span class="hljs-built_in"> monitor </span>mymaster<br></code></pre></td></tr></table></figure><p>主从复制特点以及 ： </p><p>读写分离 ， 主服务器用来写入， 从服务器用来读取</p><p>容灾快速回复： 如果从服务器挂了的话，可以切换到另一台从服务器</p><p>搭建详情: 查看此博客 <a href="https://www.cnblogs.com/kingyifan/p/11721422.html#!comments">https://www.cnblogs.com/kingyifan/p/11721422.html#!comments</a></p><p>redis 集群搭建： <a href="https://www.cnblogs.com/niceyoo/p/14118146.html">https://www.cnblogs.com/niceyoo/p/14118146.html</a> 查看此博客 </p><p>声明  所有的搭建都是在docker 上搭建的</p><h2 id="7、缓存的三大问题"><a href="#7、缓存的三大问题" class="headerlink" title="7、缓存的三大问题"></a>7、缓存的三大问题</h2><h3 id="7-1、缓存穿透"><a href="#7-1、缓存穿透" class="headerlink" title="7.1、缓存穿透"></a>7.1、缓存穿透</h3><p>是什么</p><blockquote><p> 缓存的命中率减低，导致请求绝大部分直接走数据库，造成数据库压力过大甚至宕机</p></blockquote><p><img src="/2021/06/25/Redis6Learn/image-20210627172316133.png" alt="image-20210627172316133"></p><p> <img src="/2021/06/25/Redis6Learn/image-20210627172541377.png" alt="image-20210627172541377"></p><h3 id="7-2、缓存雪崩"><a href="#7-2、缓存雪崩" class="headerlink" title="7.2、缓存雪崩"></a>7.2、缓存雪崩</h3><p>是什么</p><blockquote><p>极少时间段，查询大量key的集中过期情况</p></blockquote><p>解决方案 ：</p><ul><li><p>构建多级缓存架构： nginx(缓存） + redis(缓存) + ehcache(其他缓存)</p></li><li><p>使用锁或者是队列 </p><ul><li>使用锁或者是队列的方式来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上。不适合高并发情况</li></ul></li><li><p>设置过期标志更新缓存：</p><ul><li>记录缓存数据是否已过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际key的缓存</li></ul></li><li><p>将缓存失效时间分散开：</p><ul><li>我们可以在原来失效时间的基础上增加一个随机值，这样每一个缓存的过期时间的重复率就会降低，很难引发集体失效的事件。</li></ul></li></ul><h3 id="7-3、缓存击穿"><a href="#7-3、缓存击穿" class="headerlink" title="7.3、缓存击穿"></a>7.3、缓存击穿</h3><p>是什么</p><blockquote><p>某一个热点 key，在缓存过期的一瞬间，同时有大量的请求打进来，由于此时缓存过期了，所以请求最终都会走到数据库，造成瞬时数据库请求量大、压力骤增，甚至可能打垮数据库。</p></blockquote><p>解决方案： </p><ul><li><p>预先设置热门数据 ：     在redis高峰访问之前，把一些热门数据提前存入到redis里面，加大这些热门数据key长</p></li><li><p>实时调整：现场监控那些数据热门，实时增加key的过期时长</p></li><li><p>使用锁 ：</p></li></ul><h2 id="8、Redis多线程"><a href="#8、Redis多线程" class="headerlink" title="8、Redis多线程"></a>8、Redis多线程</h2><p>Redis并不是多线程？ </p><blockquote><p>Redis是多路IO复用，执行命令还是单线程，</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringSecurity</title>
    <link href="/2021/06/18/SpringSecurity/"/>
    <url>/2021/06/18/SpringSecurity/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringSecurity"><a href="#SpringSecurity" class="headerlink" title="SpringSecurity"></a>SpringSecurity</h1><h2 id="1、-是什么？"><a href="#1、-是什么？" class="headerlink" title="1、 是什么？"></a>1、 是什么？</h2><p>看官网<a href="https://docs.spring.io/spring-security/site/docs/current/reference/html5/">Spring Security Reference</a></p><h2 id="2、项目搭建"><a href="#2、项目搭建" class="headerlink" title="2、项目搭建"></a>2、项目搭建</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        spring security 安全管理框架--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动成功后 ， 后台日志会生成一串安全密码</p><p><img src="/2021/06/18/SpringSecurity/image-20210618201857845.png" alt="image-20210618201857845"></p><p>前台访问登录请求则是使用的Security自带的登录页面</p><img src="/2021/06/18/SpringSecurity/image-20210618202018351.png" alt="image-20210618202018351" style="zoom:33%;"> <p>账号使用的是 user  密码是 日志的密码</p><h4 id="SpringSecurity-Oauth2"><a href="#SpringSecurity-Oauth2" class="headerlink" title="SpringSecurity   +  Oauth2"></a><code>SpringSecurity</code>   +  Oauth2</h4><blockquote><p>配置 Security 配置器 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启安全控制</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 加密服务</span></span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 关闭csrf防护</span></span><br><span class="line">        http.csrf().disable()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">// 放行登录和认证</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/oauth/**&quot;</span>,<span class="string">&quot;/login/**&quot;</span>, <span class="string">&quot;logout/**&quot;</span>)</span><br><span class="line">                .permitAll()</span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .permitAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>配置<code>OAuth2</code> 的资源服务</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableResourceServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourcesServerConfig</span> <span class="keyword">extends</span> <span class="title">ResourceServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .requestMatchers()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/user/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>配置<code>OAuth2</code> 的认证服务</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启授权服务器</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationServerConfig</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * clients : 客户端详细信息服务配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        clients.inMemory()</span><br><span class="line">                <span class="comment">// client id  </span></span><br><span class="line">                .withClient(<span class="string">&quot;admin&quot;</span>) </span><br><span class="line">                <span class="comment">// 密钥</span></span><br><span class="line">                .secret(passwordEncoder.encode(<span class="string">&quot;123123&quot;</span>))</span><br><span class="line">                <span class="comment">// 设置重定向路径</span></span><br><span class="line">                .redirectUris(<span class="string">&quot;https://www.bilibili.com&quot;</span>)</span><br><span class="line">                <span class="comment">// 配置申请授权范围</span></span><br><span class="line">                .scopes(<span class="string">&quot;all&quot;</span>)</span><br><span class="line">                <span class="comment">// 设置授权类型  授权码模式 </span></span><br><span class="line">                .authorizedGrantTypes(<span class="string">&quot;authorization_code&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>授权码模式  访问流程</p><ol><li><p>浏览器访问<a href="http://localhost:2313/oauth/authorize?response_type=code&amp;client_id=admin&amp;redirect_uri=https://www.bilibili.com&amp;scope=all">http://localhost:2313/oauth/authorize?response_type=code&amp;client_id=admin&amp;redirect_uri=https://www.bilibili.com&amp;scope=all</a></p></li><li><p>这条<code>url</code>的 的参数  必须和授权服务一致 否则会出现错误 </p><ol><li><blockquote><p>response_type=code </p><p>client_id=admin</p><p>redirect_uri=<a href="https://www.bilibili.com/">https://www.bilibili.com</a></p><p>scope=all</p></blockquote></li></ol></li></ol><p><img src="/2021/06/18/SpringSecurity/image-20210619163841308.png" alt="image-20210619163841308"></p><p>输入之后自动跳转 security的登录页面 </p><p><img src="/2021/06/18/SpringSecurity/image-20210619164144176.png" alt="image-20210619164144176"></p><p>code 就是授权码 </p><p><img src="/2021/06/18/SpringSecurity/image-20210619164205506.png" alt="image-20210619164205506"></p><p>这里的账号密码就是授权服务器的账号和密码<img src="/2021/06/18/SpringSecurity/image-20210619164255414.png" alt="image-20210619164255414"></p><p>这个里面的字段和<strong>授权服务器</strong>相同, 然后授权服务器发送token </p><p>访问login 并带上token </p><p><img src="/2021/06/18/SpringSecurity/image-20210619165450033.png" alt="image-20210619165450033"></p><p>访问接口带上token 即可返回正确数据</p><h4 id="使用Password模式进行认证"><a href="#使用Password模式进行认证" class="headerlink" title="使用Password模式进行认证"></a>使用Password模式进行认证</h4><p>增加一个方法  修改<code>authorizedGrantTypes</code> 类型为password</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启授权服务器</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationServerConfig</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码模式需要使用的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endpoints</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     * 将密码传输给授权服务器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        endpoints.authenticationManager(authenticationManager)</span><br><span class="line">                .userDetailsService(userService);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * clients : 客户端详细信息服务配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        clients.inMemory()</span><br><span class="line">                <span class="comment">// client id</span></span><br><span class="line">                .withClient(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                <span class="comment">// 密钥</span></span><br><span class="line">                .secret(passwordEncoder.encode(<span class="string">&quot;123123&quot;</span>))</span><br><span class="line">                <span class="comment">// 设置重定向路径</span></span><br><span class="line">                .redirectUris(<span class="string">&quot;https://www.bilibili.com&quot;</span>)</span><br><span class="line">                <span class="comment">// 配置申请授权范围</span></span><br><span class="line">                .scopes(<span class="string">&quot;all&quot;</span>)</span><br><span class="line">                <span class="comment">// 设置授权类型 使用授权码的方式</span></span><br><span class="line">                <span class="comment">//.authorizedGrantTypes(&quot;authorization_code&quot;);</span></span><br><span class="line">                <span class="comment">// 使用密码的方式</span></span><br><span class="line">                .authorizedGrantTypes(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为需要注入<code>AuthenticationManager</code>所以需要往<code>SecurityConfig</code>里面配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启安全控制</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 加密服务</span></span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManager</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">super</span>.authenticationManager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 关闭csrf防护</span></span><br><span class="line">        http.csrf().disable()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">// 放行登录和认证</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/oauth/**&quot;</span>,<span class="string">&quot;/login/**&quot;</span>, <span class="string">&quot;logout/**&quot;</span>)</span><br><span class="line">                .permitAll()</span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .permitAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>SpringSecurity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mallGateway</title>
    <link href="/2021/06/17/mallGateway/"/>
    <url>/2021/06/17/mallGateway/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是服务网关-？"><a href="#什么是服务网关-？" class="headerlink" title="什么是服务网关 ？"></a>什么是服务网关 ？</h2><ul><li><code>API </code>    是一个服务器，是系统统一堆外开放的入口，网关封装了内部架构，为每个客户端提供了一个定制的<code>API</code>。<code>API</code>网关方式的核心就是：所有的客户端和服务端通过统一的网关接入微服务，在网关层处理所有非业务功能</li></ul><p>优缺点 ：</p><ul><li>通过聚合接口使得服务对调用者透明，  降低客户端和服务端的耦合度。</li><li>聚合后台服务，节省流量，提高性能，提升用户体验</li><li>提供安全，流量控制，认证，过滤，监控，计费的API管理</li></ul><h2 id="为什么要有服务网关"><a href="#为什么要有服务网关" class="headerlink" title="为什么要有服务网关"></a>为什么要有服务网关</h2><p>单机应用  ： 浏览器发送请求给应用，应用查询数据库原路返回服务器，单机应用只有一个服务所以是用不上网关的</p><p><img src="/2021/06/17/mallGateway/image-20210617145224101.png" alt="image-20210617145224101"></p><p>微服务应用 ： </p><h3 id="网关解决了什么问题"><a href="#网关解决了什么问题" class="headerlink" title="网关解决了什么问题"></a>网关解决了什么问题</h3><ul><li>统一接入</li><li>认证授权</li><li>流量控制</li><li>协议适配  </li></ul><h3 id="Gateway-实现API网关"><a href="#Gateway-实现API网关" class="headerlink" title="Gateway 实现API网关"></a>Gateway 实现<code>API</code>网关</h3><h4 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h4><ul><li><pre><code> **路由（router）** :  包括`id ` ,   目标`uri` ,    一组断言和一组过滤器组成。如果断言路由为真，则说明请求的Uri和配置相符</code></pre></li><li>​    <strong>断言（Predicate）</strong>：检验</li><li>​    <strong>过滤 （Filter）</strong>：</li></ul><h5 id="1、-路由的配置规则-："><a href="#1、-路由的配置规则-：" class="headerlink" title="1、 路由的配置规则 ："></a>1、 路由的配置规则 ：</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment">#配置路由路径</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">mall-auth</span>   <span class="comment">#  路由id </span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://mall-auth</span>   <span class="comment"># 目标微服务地址</span></span><br><span class="line">          <span class="attr">predicates:</span>    <span class="comment">#  断言  检验请求地址是否和path相符  判断条件</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/mall-auth/**</span>   <span class="comment">#  根据请求路进行跳转</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">After=2017-01-20T17:42:47.789-07:00[America/Denver]</span> </span><br><span class="line">            <span class="comment"># 根据指定时间前进行判断</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Before=2017-01-20T17:42:47.789-07:00[America/Denver]</span></span><br><span class="line">            <span class="comment"># 根据指定时间后进行判断</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Between=2017-01-20T17:42:47.789-07:00[America/Denver],</span> <span class="number">2017-01-21T17:42:47.789-07:00</span>[<span class="string">America/Denver</span>]</span><br><span class="line">            <span class="comment"># 根据指定时间内进行判断</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Cookie=chocolate,</span> <span class="string">ch.p</span></span><br><span class="line">            <span class="comment"># 根据cookie 进行判断</span></span><br><span class="line">            </span><br></pre></td></tr></table></figure><h4 id="2、动态路由规则-："><a href="#2、动态路由规则-：" class="headerlink" title="2、动态路由规则 ："></a>2、动态路由规则 ：</h4><p>动态获取微服务地址： </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span>   </span><br><span class="line">          <span class="comment"># 通过开启与服务发现进行结合，通过serviceId转发到具体服务实例。</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">lower-case-service-id:</span> <span class="literal">true</span> <span class="comment">#使用小写service-id</span></span><br></pre></td></tr></table></figure><p>3、 Path过滤器</p><p>4、 全局过滤器 <code>Global Filter</code> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">全局过滤器不需要在配置文件中配置，作用在所有的路由上，最终通过   </span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>gateway</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker搭建笔记</title>
    <link href="/2021/06/16/docker%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/06/16/docker%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="docker-搭建-RibbitMQ"><a href="#docker-搭建-RibbitMQ" class="headerlink" title="docker 搭建 RibbitMQ"></a>docker 搭建 RibbitMQ</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 拉取镜像</span><br>docker pull rabbitmq<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看所有镜像</span><br>docker images<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 创建容器</span> <br>docker run -d --name rabbitmq<br>-p 5672:5672<br>-p 15672:15672<br>-v `pwd`/data:/var/lib/rabbitmq<br>--hostname myRabbit <br>-e RABBITMQ_DEFAULT_VHOST=my_vhost  <br>-e RABBITMQ_DEFAULT_USER=admin <br>-e RABBITMQ_DEFAULT_PASS=admin rabbitmq<br><br><br>rabbitmq 是指image name<br>-d 后台运行容器；<br>--name 指定容器名；<br>-p 指定服务运行的端口（5672：应用访问端口；15672：控制台Web端口号）；<br>-v 映射目录或文件；<br>--hostname 主机名（RabbitMQ的一个重要注意事项是它根据所谓的 “节点名称” 存储数据，默认为主机名）；<br>-e 指定环境变量；（<br>RABBITMQ_DEFAULT_VHOST：默认虚拟机名；<br>RABBITMQ_DEFAULT_USER：默认的用户名；<br>RABBITMQ_DEFAULT_PASS：默认用户名的密码）<br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看运行容器</span> <br>docker ps <br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 启动管理程序</span> <br><span class="hljs-meta">#</span><span class="bash"> docker <span class="hljs-built_in">exec</span> -it【交互式方式执行命令】容器id/容器name 命令</span><br>docker exec -it rabbitmq  rabbitmq-plugins enable rabbitmq_management<br></code></pre></td></tr></table></figure><h2 id="Docker搭建Redis6"><a href="#Docker搭建Redis6" class="headerlink" title="Docker搭建Redis6"></a>Docker搭建Redis6</h2><h4 id="1、-拉取镜像"><a href="#1、-拉取镜像" class="headerlink" title="1、 拉取镜像"></a>1、 拉取镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull redis<br></code></pre></td></tr></table></figure><h4 id="2、下载配置文件"><a href="#2、下载配置文件" class="headerlink" title="2、下载配置文件"></a>2、下载配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建本地文件映射 </span><br><span class="hljs-built_in">cd</span> /usr/<span class="hljs-built_in">local</span><br>mkdir redis<br><span class="hljs-built_in">cd</span> redis<br><span class="hljs-comment"># 下载配置文件</span><br>wget http://download.redis.io/redis-stable/redis.conf<br><br><span class="hljs-comment"># 修改配置文件</span><br><span class="hljs-comment"># 关闭ip绑定 </span><br><span class="hljs-built_in">bind</span> 127.0.0.1 -::1 注释掉这行<br></code></pre></td></tr></table></figure><p><strong>关闭保护模式（默认是yes）</strong></p><p><img src="/2021/06/16/docker%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/image-20210622084518055.png" alt="image-20210622084518055"></p><h4 id="3、-创建容器"><a href="#3、-创建容器" class="headerlink" title="3、 创建容器"></a>3、 创建容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -p 6379:6379  -v <span class="hljs-variable">$PWD</span>/data:/data -v <span class="hljs-variable">$PWD</span>/redis.conf:/etc/redis/redis.conf --privileged=<span class="hljs-literal">true</span> --name mredis -d redis redis-server /etc/redis/redis.conf<br><br><br><br><br>创建哨兵模式的redis <br>docker run -p 6379:6379 -p 26379:26379   -v <span class="hljs-variable">$PWD</span>/data:/data -v <span class="hljs-variable">$PWD</span>/redis.conf:/etc/redis/redis.conf --privileged=<span class="hljs-literal">true</span> --name sentinelredis -d redis redis-server /etc/redis/redis.conf<br><br><span class="hljs-comment"># 进入容器内部</span><br>docker <span class="hljs-built_in">exec</span> -it redis /bin/bash<br><br><span class="hljs-comment"># 更新依赖  安装vim</span><br>apt-get update<br>apt-get install -y vim<br></code></pre></td></tr></table></figure><h4 id="4、查看运行状态"><a href="#4、查看运行状态" class="headerlink" title="4、查看运行状态"></a>4、查看运行状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps<br></code></pre></td></tr></table></figure><h4 id="5、-进入本地客户端"><a href="#5、-进入本地客户端" class="headerlink" title="5、 进入本地客户端"></a>5、 进入本地客户端</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it mredis(与创建的容器名相对应) redis-cli<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mall学习笔记</title>
    <link href="/2021/06/16/mall%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/06/16/mall%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="1、项目结构分析"><a href="#1、项目结构分析" class="headerlink" title="1、项目结构分析"></a>1、项目结构分析</h2><p><img src="/2021/06/16/mall%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210616131124608.png" alt="image-20210616131124608"> </p><p><code>mall-admin</code> ： 主业务模块</p><p><code>mall-auth</code> ： 用户认证模块</p><p><code>mall-common </code>：公共模块</p><p><code>mall-monitor </code>：监控模块</p><p><code>mall-portal </code>： 前端用户接口</p><p><code>mall-search</code> ： 搜索模块</p><p><code>mall-mbg</code> ： Mapper配置文件和接口</p><p><code>mall-gateway</code> ：网关模块 </p><p>所有的请求都走网关进入先阅读<code>gateway</code>和<code>auth</code></p><h3 id="Gateway模块"><a href="#Gateway模块" class="headerlink" title="Gateway模块"></a>Gateway模块</h3><h4 id="1、先查看配置文件"><a href="#1、先查看配置文件" class="headerlink" title="1、先查看配置文件"></a>1、先查看配置文件</h4><h5 id="application-yaml"><a href="#application-yaml" class="headerlink" title="application.yaml"></a><strong><code>application.yaml</code></strong></h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8201</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">lower-case-service-id:</span> <span class="literal">true</span> <span class="comment">#使用小写service-id</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment">#配置路由路径</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">mall-auth</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://mall-auth</span></span><br><span class="line">          <span class="attr">predicates:</span>  <span class="comment"># 使用路径断言</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/mall-auth/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">mall-admin</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://mall-admin</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/mall-admin/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span>    </span><br><span class="line">            <span class="comment"># 分割请求路径  默认前端请求路径都带mall-admin 将mall-admin分割掉</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">mall-portal</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://mall-portal</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/mall-portal/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">mall-search</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://mall-search</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/mall-search/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">mall-demo</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://mall-demo</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/mall-demo/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">oauth2:</span></span><br><span class="line">      <span class="attr">resourceserver:</span></span><br><span class="line">        <span class="attr">jwt:</span></span><br><span class="line">          <span class="attr">jwk-set-uri:</span> <span class="string">&#x27;http://localhost:8201/mall-auth/rsa/publicKey&#x27;</span> <span class="comment">#配置RSA的公钥访问地址</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="comment">#host: 192.168.1.57</span></span><br><span class="line">    <span class="attr">password:</span></span><br><span class="line"><span class="attr">secure:</span></span><br><span class="line">  <span class="attr">ignore:</span></span><br><span class="line">    <span class="attr">urls:</span> <span class="comment">#配置白名单路径</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/doc.html&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/swagger-resources/**&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/swagger/**&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/**/v2/api-docs&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/**/*.js&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/**/*.css&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/**/*.png&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/**/*.ico&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/webjars/springfox-swagger-ui/**&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/actuator/**&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/mall-auth/oauth/token&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/mall-auth/rsa/publicKey&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/mall-search/**&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/mall-portal/sso/login&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/mall-portal/sso/register&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/mall-portal/sso/getAuthCode&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/mall-portal/home/**&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/mall-portal/product/**&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/mall-portal/brand/**&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/mall-admin/admin/login&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/mall-admin/admin/register&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/mall-admin/minio/upload&quot;</span></span><br><span class="line"><span class="attr">management:</span> <span class="comment">#开启SpringBoot Admin的监控</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><p>注意 ：</p><p><code>bootstrap.yml</code>（<code>bootstrap.properties</code>）先加载<br><code>application.yml</code>（<code>application.properties</code>）后加载<br><code>bootstrap.yml</code> 用于应用程序上下文的引导阶段。<br><code>bootstrap.yml</code> 由父Spring<code> ApplicationContext</code>加载。</p><h5 id="bootstrap-yaml"><a href="#bootstrap-yaml" class="headerlink" title="bootstrap.yaml"></a><strong><code>bootstrap.yaml</code></strong></h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">  <span class="comment"># 配置的是dev环境</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">  <span class="comment"># 配置应用名  用于微服务注册</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">mall-gateway</span></span><br></pre></td></tr></table></figure><h5 id="bootstrap-dev-yaml-开发环境"><a href="#bootstrap-dev-yaml-开发环境" class="headerlink" title="bootstrap-dev.yaml(开发环境)"></a><strong><code>bootstrap-dev.yaml</code></strong>(开发环境)</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">    <span class="comment"># 配置服务发现</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">      <span class="comment"># 配置nacos 地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">http://localhost:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">      <span class="comment"># 配置配置地址 </span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">http://localhost:8848</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span>  <span class="comment"># 配置配置文件地址</span></span><br></pre></td></tr></table></figure><p>运行网关</p><p>因为Cookie 不能跨域访问， 配置<strong>全局的跨域器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalCorsConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsWebFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加载全局跨域配置&quot;</span>);</span><br><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        <span class="comment">// 允许任何方式访问</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 允许任何来源的请求访问</span></span><br><span class="line">        config.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 允许任何请求头进行访问</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置是否允许发送cookie信息</span></span><br><span class="line">        config.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 为Url配置映射路径</span></span><br><span class="line">        UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource(<span class="keyword">new</span> PathPatternParser());</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line">        <span class="comment">// 返回重新定义的配置器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsWebFilter(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、资源服务器"><a href="#2、资源服务器" class="headerlink" title="2、资源服务器"></a>2、资源服务器</h4><h5 id="资源配置服务"><a href="#资源配置服务" class="headerlink" title="资源配置服务"></a>资源配置服务</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebFluxSecurity</span> </span><br><span class="line"><span class="comment">// 由于gateway使用的是Flux 协议</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceServerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 权限管理器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AuthorizationManager authorizationManager;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 权限白名单</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IgnoreUrlsConfig ignoreUrlsConfig;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Restful 访问被拒绝处理程序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RestfulAccessDeniedHandler restfulAccessDeniedHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 休息站点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RestAuthenticationEntryPoint restAuthenticationEntryPoint;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 白名单路径访问时需要移除JWT请求头</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IgnoreUrlsRemoveJwtFilter ignoreUrlsRemoveJwtFilter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 安全网页过滤链  这里涉及的是SpringSecurity Web Filter Chain  保护网关</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityWebFilterChain <span class="title">springSecurityFilterChain</span><span class="params">(ServerHttpSecurity http)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载 jwtAuthenticationConverter  将</span></span><br><span class="line">        http.oauth2ResourceServer().jwt()</span><br><span class="line">                .jwtAuthenticationConverter(jwtAuthenticationConverter());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自定义处理JWT请求头过期或签名错误的结果</span></span><br><span class="line">        <span class="comment">// 身份验证入口  如果没有token 则会直接提出</span></span><br><span class="line">        http.oauth2ResourceServer().authenticationEntryPoint(restAuthenticationEntryPoint);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对白名单路径，直接移除JWT请求头</span></span><br><span class="line">        http.addFilterBefore(ignoreUrlsRemoveJwtFilter,SecurityWebFiltersOrder.AUTHENTICATION);</span><br><span class="line"></span><br><span class="line">        http.authorizeExchange()</span><br><span class="line">                <span class="comment">// 配置网关白名单  将全局网关配置的url获取出来进行匹配</span></span><br><span class="line">                .pathMatchers(ArrayUtil.toArray(ignoreUrlsConfig.getUrls(),String.class)).permitAll()</span><br><span class="line">                <span class="comment">// 剩余所有的请求都要走鉴权管理器</span></span><br><span class="line">                .anyExchange().access(authorizationManager)<span class="comment">//鉴权管理器配置</span></span><br><span class="line">                .and().exceptionHandling()</span><br><span class="line">                <span class="comment">// 权限不足的接口 走这个返回  没有权限访问时 处理未授权</span></span><br><span class="line">                .accessDeniedHandler(restfulAccessDeniedHandler)</span><br><span class="line">                 <span class="comment">// 没有token是 走这个返回  处理未认证</span></span><br><span class="line">                .authenticationEntryPoint(restAuthenticationEntryPoint)</span><br><span class="line">                .and().csrf().disable();</span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Jwt认证转换器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Converter&lt;Jwt, ? extends Mono&lt;? extends AbstractAuthenticationToken&gt;&gt; jwtAuthenticationConverter() &#123;</span><br><span class="line"></span><br><span class="line">        JwtGrantedAuthoritiesConverter jwtGrantedAuthoritiesConverter = <span class="keyword">new</span> JwtGrantedAuthoritiesConverter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置权限前缀</span></span><br><span class="line">        jwtGrantedAuthoritiesConverter.setAuthorityPrefix(AuthConstant.AUTHORITY_PREFIX);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置权限声明名词</span></span><br><span class="line">        jwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(AuthConstant.AUTHORITY_CLAIM_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        JwtAuthenticationConverter jwtAuthenticationConverter = <span class="keyword">new</span> JwtAuthenticationConverter();</span><br><span class="line"></span><br><span class="line">        jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter(jwtGrantedAuthoritiesConverter);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ReactiveJwtAuthenticationConverterAdapter(jwtAuthenticationConverter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在刚才的资源服务器中已经配置了 这个校验器  所以至于要交予spring托管</p><h5 id="权限校验器"><a href="#权限校验器" class="headerlink" title="权限校验器"></a>权限校验器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationManager</span> <span class="keyword">implements</span> <span class="title">ReactiveAuthorizationManager</span>&lt;<span class="title">AuthorizationContext</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IgnoreUrlsConfig ignoreUrlsConfig;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mono</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authorizationContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;AuthorizationDecision&gt; <span class="title">check</span><span class="params">(Mono&lt;Authentication&gt; mono, AuthorizationContext authorizationContext)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过 request</span></span><br><span class="line">        ServerHttpRequest request = authorizationContext.getExchange().getRequest();</span><br><span class="line">        <span class="comment">// 获取uri</span></span><br><span class="line">        URI uri = request.getURI();</span><br><span class="line">        <span class="comment">// 创建路径匹配器</span></span><br><span class="line">        PathMatcher pathMatcher = <span class="keyword">new</span> AntPathMatcher();</span><br><span class="line">        <span class="comment">//白名单路径直接放行</span></span><br><span class="line">        List&lt;String&gt; ignoreUrls = ignoreUrlsConfig.getUrls();</span><br><span class="line">        <span class="keyword">for</span> (String ignoreUrl : ignoreUrls) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pathMatcher.match(ignoreUrl, uri.getPath())) &#123;</span><br><span class="line">                <span class="keyword">return</span> Mono.just(<span class="keyword">new</span> AuthorizationDecision(<span class="keyword">true</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 检测请求方式</span></span><br><span class="line">        <span class="keyword">if</span>(request.getMethod()==HttpMethod.OPTIONS)&#123;</span><br><span class="line">            <span class="keyword">return</span> Mono.just(<span class="keyword">new</span> AuthorizationDecision(<span class="keyword">true</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不同用户体系登录不允许互相访问</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取请求头中的token</span></span><br><span class="line">            String token = request.getHeaders().getFirst(AuthConstant.JWT_TOKEN_HEADER);</span><br><span class="line">            <span class="comment">// 检验请求中是否有token</span></span><br><span class="line">            <span class="keyword">if</span>(StrUtil.isEmpty(token))&#123;</span><br><span class="line">                <span class="keyword">return</span> Mono.just(<span class="keyword">new</span> AuthorizationDecision(<span class="keyword">false</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 去除token前缀</span></span><br><span class="line">            String realToken =   token.replace(AuthConstant.JWT_TOKEN_PREFIX, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="comment">// 将realToken中的数据进行解密</span></span><br><span class="line">            JWSObject jwsObject = JWSObject.parse(realToken);</span><br><span class="line">            String userStr = jwsObject.getPayload().toString();</span><br><span class="line">            <span class="comment">// 将token的数据封装到一个bean中</span></span><br><span class="line">            UserDto userDto = JSONUtil.toBean(userStr, UserDto.class);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取请求地址的url进行配对 失败返回false</span></span><br><span class="line">            <span class="keyword">if</span> (AuthConstant.ADMIN_CLIENT_ID.equals(userDto.getClientId()) &amp;&amp;!pathMatcher.match(AuthConstant.ADMIN_URL_PATTERN, uri.getPath())) &#123;</span><br><span class="line">                <span class="keyword">return</span> Mono.just(<span class="keyword">new</span> AuthorizationDecision(<span class="keyword">false</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(AuthConstant.PORTAL_CLIENT_ID.equals(userDto.getClientId()) &amp;&amp; pathMatcher.match(AuthConstant.ADMIN_URL_PATTERN, uri.getPath())) &#123;</span><br><span class="line">                <span class="keyword">return</span> Mono.just(<span class="keyword">new</span> AuthorizationDecision(<span class="keyword">false</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> Mono.just(<span class="keyword">new</span> AuthorizationDecision(<span class="keyword">false</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//非管理端路径直接放行  前端用户接口直接放行</span></span><br><span class="line">        <span class="keyword">if</span> (!pathMatcher.match(AuthConstant.ADMIN_URL_PATTERN, uri.getPath())) &#123;</span><br><span class="line">            <span class="keyword">return</span> Mono.just(<span class="keyword">new</span> AuthorizationDecision(<span class="keyword">true</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//管理端路径需校验权限</span></span><br><span class="line">        <span class="comment">//将redis中的数据进行去除之后重新写入map集合中</span></span><br><span class="line">        Map&lt;Object, Object&gt; resourceRolesMap =</span><br><span class="line">                redisTemplate.opsForHash().entries(AuthConstant.RESOURCE_ROLES_MAP_KEY);</span><br><span class="line">        </span><br><span class="line">        Iterator&lt;Object&gt; iterator = resourceRolesMap.keySet().iterator();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        List&lt;String&gt; authorities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            String pattern = (String) iterator.next();</span><br><span class="line">            <span class="comment">// 将uri的地址与redis中的地址进行匹配</span></span><br><span class="line">            <span class="keyword">if</span> (pathMatcher.match(pattern, uri.getPath())) &#123;</span><br><span class="line">                authorities.addAll(Convert.toList(String.class, resourceRolesMap.get(pattern)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        authorities = authorities.stream().map(i -&gt; i = AuthConstant.AUTHORITY_PREFIX + i).collect(Collectors.toList());</span><br><span class="line">        System.out.println(authorities);</span><br><span class="line">        <span class="comment">//认证通过且角色匹配的用户可访问当前路径</span></span><br><span class="line">        <span class="keyword">return</span> mono</span><br><span class="line">                .filter(Authentication::isAuthenticated)</span><br><span class="line">                .flatMapIterable(Authentication::getAuthorities)</span><br><span class="line">                .map(GrantedAuthority::getAuthority)</span><br><span class="line">                .any(authorities::contains)</span><br><span class="line">                .map(AuthorizationDecision::<span class="keyword">new</span>)</span><br><span class="line">                .defaultIfEmpty(<span class="keyword">new</span> AuthorizationDecision(<span class="keyword">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>start - 9.0</p><p>网关过滤器拦截请求执行顺序 </p><p>白名单拦截器 -&gt; 全局过滤器 -&gt; 安全验证管理器  -&gt; 跳转模块</p><h4 id="3、拦截器"><a href="#3、拦截器" class="headerlink" title="3、拦截器"></a>3、拦截器</h4><h5 id="白名单拦截器"><a href="#白名单拦截器" class="headerlink" title="白名单拦截器"></a>白名单拦截器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IgnoreUrlsRemoveJwtFilter</span> <span class="keyword">implements</span> <span class="title">WebFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IgnoreUrlsConfig ignoreUrlsConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, WebFilterChain chain)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;白名单拦截器&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取请求对象 </span></span><br><span class="line">        ServerHttpRequest request = exchange.getRequest();</span><br><span class="line">        <span class="comment">// 获取请求路径 </span></span><br><span class="line">        URI uri = request.getURI();</span><br><span class="line">        <span class="comment">// 创建路径匹配器</span></span><br><span class="line">        PathMatcher pathMatcher = <span class="keyword">new</span> AntPathMatcher();</span><br><span class="line">        <span class="comment">//白名单路径移除JWT请求头</span></span><br><span class="line">        List&lt;String&gt; ignoreUrls = ignoreUrlsConfig.getUrls();</span><br><span class="line">        <span class="comment">// 遍历该路径是否属于白名单 </span></span><br><span class="line">        <span class="keyword">for</span> (String ignoreUrl : ignoreUrls) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pathMatcher.match(ignoreUrl, uri.getPath())) &#123;</span><br><span class="line">                request = exchange .getRequest(). mutate(). header (AuthConstant.JWT_TOKEN_HEADER, <span class="string">&quot;&quot;</span>).build();</span><br><span class="line">                <span class="comment">// 封装请求传递给 下一个请求</span></span><br><span class="line">                exchange = exchange.mutate().request(request).build();</span><br><span class="line">                <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthGlobalFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  创建日志对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(AuthGlobalFilter.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过exchange 获取token对象</span></span><br><span class="line">        String token = exchange. getRequest(). getHeaders(). getFirst(AuthConstant.JWT_TOKEN_HEADER);</span><br><span class="line">        System.out.println(<span class="string">&quot;进入全局拦截器 &quot;</span>);</span><br><span class="line">        LOGGER.warn(<span class="string">&quot;当前请求是否有jwt&quot;</span> + StrUtil.isEmpty(token));</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isEmpty(token)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;token === null&quot;</span>);</span><br><span class="line">            System.out.println(exchange);</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//从token中解析用户信息并设置到Header中去</span></span><br><span class="line">            String realToken = token.replace(AuthConstant.JWT_TOKEN_PREFIX, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            JWSObject jwsObject = JWSObject.parse(realToken);</span><br><span class="line">            String userStr = jwsObject.getPayload().toString();</span><br><span class="line">            LOGGER.info(<span class="string">&quot;AuthGlobalFilter.filter() user:&#123;&#125;&quot;</span>,userStr);</span><br><span class="line">            ServerHttpRequest request = exchange.getRequest().mutate().header(AuthConstant.USER_TOKEN_HEADER, userStr).build();</span><br><span class="line">            exchange = exchange.mutate().request(request).build();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *   过滤器执行顺序，数值越小，优先级越高</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、自定义返回结果"><a href="#4、自定义返回结果" class="headerlink" title="4、自定义返回结果"></a>4、自定义返回结果</h4><h5 id="校验失败返回结果"><a href="#校验失败返回结果" class="headerlink" title="校验失败返回结果"></a>校验失败返回结果</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestfulAccessDeniedHandler</span> <span class="keyword">implements</span> <span class="title">ServerAccessDeniedHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">handle</span><span class="params">(ServerWebExchange exchange, AccessDeniedException denied)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;权限不对&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ServerHttpResponse response = exchange.getResponse();</span><br><span class="line"></span><br><span class="line">        response.setStatusCode(HttpStatus.OK);</span><br><span class="line"></span><br><span class="line">        response.getHeaders().set(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE);</span><br><span class="line"></span><br><span class="line">        response.getHeaders().set(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        response.getHeaders().set(<span class="string">&quot;Cache-Control&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String body= JSONUtil.toJsonStr(CommonResult.forbidden(denied.getMessage()));</span><br><span class="line"></span><br><span class="line">        DataBuffer buffer =  response.bufferFactory().wrap(body.getBytes(Charset.forName(<span class="string">&quot;UTF-8&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        System.out.println(Mono.just(buffer));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response.writeWith(Mono.just(buffer));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id><a href="#" class="headerlink" title></a></h5><h5 id="没有token或者token过期时-异常返回结果"><a href="#没有token或者token过期时-异常返回结果" class="headerlink" title="没有token或者token过期时   异常返回结果"></a>没有token或者token过期时   <strong>异常返回结果</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestAuthenticationEntryPoint</span> <span class="keyword">implements</span> <span class="title">ServerAuthenticationEntryPoint</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">commence</span><span class="params">(ServerWebExchange exchange, AuthenticationException e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;因为没有token直接返回&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ServerHttpResponse response = exchange.getResponse();</span><br><span class="line"></span><br><span class="line">        response.setStatusCode(HttpStatus.OK);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定响应头类型</span></span><br><span class="line">        response.getHeaders().set(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加跨域支持</span></span><br><span class="line">        response.getHeaders().set(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否允许缓存 控制</span></span><br><span class="line">        response.getHeaders().set(<span class="string">&quot;Cache-Control&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 异常message</span></span><br><span class="line">        String body= JSONUtil.toJsonStr(CommonResult.unauthorized(e.getMessage()));</span><br><span class="line"></span><br><span class="line">        DataBuffer buffer =  response.bufferFactory().wrap(body.getBytes(Charset.forName(<span class="string">&quot;UTF-8&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response.writeWith(Mono.just(buffer));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Auth模块"><a href="#Auth模块" class="headerlink" title="Auth模块"></a><code>Auth</code>模块</h3><p>模块介绍 ： 该模块用于认证和发送token字符串  </p><h4 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h4><h5 id="application-yaml-1"><a href="#application-yaml-1" class="headerlink" title="application.yaml"></a><code>application.yaml</code></h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8401</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">okhttp:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">3000</span> <span class="comment">#服务请求连接超时时间（毫秒）</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">3000</span> <span class="comment">#服务请求处理超时时间（毫秒）</span></span><br></pre></td></tr></table></figure><h5 id="bootstrap-yaml-1"><a href="#bootstrap-yaml-1" class="headerlink" title="bootstrap.yaml"></a><code>bootstrap.yaml</code></h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">  <span class="comment"># 使用dev环境</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">  <span class="comment"># 配置应用名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">mall-auth</span></span><br></pre></td></tr></table></figure><h5 id="bootstrap-dev-yaml"><a href="#bootstrap-dev-yaml" class="headerlink" title="bootstrap-dev.yaml"></a><code>bootstrap-dev.yaml</code></h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">      <span class="comment"># 服务发现地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">http://localhost:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">      <span class="comment"># 服务配置地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">http://localhost:8848</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line"><span class="comment"># 配置日志级别</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h4 id="2、配置类"><a href="#2、配置类" class="headerlink" title="2、配置类"></a>2、配置类</h4><h5 id="配置授权服务器"><a href="#配置授权服务器" class="headerlink" title="配置授权服务器"></a>配置授权服务器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 开启授权服务器</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Oauth2ServerConfig</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 密码加密方式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义登录逻辑</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserServiceImpl userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 身份认证转换器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// jwt内容增强器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtTokenEnhancer jwtTokenEnhancer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        clients.inMemory()</span><br><span class="line">                <span class="comment">// 配置clientId</span></span><br><span class="line">                .withClient(<span class="string">&quot;admin-app&quot;</span>)</span><br><span class="line">                <span class="comment">// 设置密码</span></span><br><span class="line">                .secret(passwordEncoder.encode(<span class="string">&quot;123456&quot;</span>))</span><br><span class="line">                <span class="comment">// 配置作用域</span></span><br><span class="line">                .scopes(<span class="string">&quot;all&quot;</span>)</span><br><span class="line">                <span class="comment">// 授权</span></span><br><span class="line">                .authorizedGrantTypes(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;refresh_token&quot;</span>)</span><br><span class="line">                <span class="comment">// 访问令牌的有效期</span></span><br><span class="line">                .accessTokenValiditySeconds(<span class="number">3600</span>*<span class="number">24</span>)</span><br><span class="line">                <span class="comment">// 刷新令牌的有效期</span></span><br><span class="line">                .refreshTokenValiditySeconds(<span class="number">3600</span>*<span class="number">24</span>*<span class="number">7</span>)</span><br><span class="line">                .and()</span><br><span class="line">                 <span class="comment">// 配置ClientId</span></span><br><span class="line">                .withClient(<span class="string">&quot;portal-app&quot;</span>)</span><br><span class="line">                <span class="comment">// 配置密钥</span></span><br><span class="line">                .secret(passwordEncoder.encode(<span class="string">&quot;123456&quot;</span>))</span><br><span class="line">                .scopes(<span class="string">&quot;all&quot;</span>)</span><br><span class="line"> <span class="comment">// 设置密码模式  刷新token 如果不设置refresh_token 是不会自动刷新token的</span></span><br><span class="line">                .authorizedGrantTypes(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;refresh_token&quot;</span>)</span><br><span class="line">                .accessTokenValiditySeconds(<span class="number">3600</span>*<span class="number">24</span>)</span><br><span class="line">                .refreshTokenValiditySeconds(<span class="number">3600</span>*<span class="number">24</span>*<span class="number">7</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  密码模式需要这个配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 配置token增强器</span></span><br><span class="line">        TokenEnhancerChain enhancerChain = <span class="keyword">new</span> TokenEnhancerChain();</span><br><span class="line"></span><br><span class="line">        List&lt;TokenEnhancer&gt; delegates = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        delegates.add(jwtTokenEnhancer);</span><br><span class="line"></span><br><span class="line">        delegates.add(accessTokenConverter());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置JWT的内容增强器</span></span><br><span class="line">        enhancerChain.setTokenEnhancers(delegates);</span><br><span class="line"></span><br><span class="line">        endpoints.authenticationManager(authenticationManager)</span><br><span class="line">                <span class="comment">//配置加载用户信息的服务</span></span><br><span class="line">                .userDetailsService(userDetailsService)</span><br><span class="line">                <span class="comment">// 配置Jwt Token 和 Access Token 转换</span></span><br><span class="line">                .accessTokenConverter(accessTokenConverter())</span><br><span class="line">                <span class="comment">// token 存储策略</span></span><br><span class="line">                .tokenEnhancer(enhancerChain);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取密钥需要身份认证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> security</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        security.allowFormAuthenticationForClients();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">// 令牌转换器  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JwtAccessTokenConverter <span class="title">accessTokenConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        JwtAccessTokenConverter jwtAccessTokenConverter = <span class="keyword">new</span> JwtAccessTokenConverter();</span><br><span class="line">        <span class="comment">// 将密钥的的值放入token中</span></span><br><span class="line">        jwtAccessTokenConverter.setKeyPair(keyPair());</span><br><span class="line">        <span class="keyword">return</span> jwtAccessTokenConverter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyPair <span class="title">keyPair</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//从classpath下的证书中获取秘钥对</span></span><br><span class="line">        <span class="comment">// 创建密钥  存入密钥文件</span></span><br><span class="line">        KeyStoreKeyFactory keyStoreKeyFactory = <span class="keyword">new</span> KeyStoreKeyFactory(<span class="keyword">new</span> ClassPathResource(<span class="string">&quot;jwt.jks&quot;</span>), <span class="string">&quot;123456&quot;</span>.toCharArray());</span><br><span class="line">        <span class="keyword">return</span> keyStoreKeyFactory.getKeyPair(<span class="string">&quot;jwt&quot;</span>, <span class="string">&quot;123456&quot;</span>.toCharArray());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SecurityConfig</p><h5 id="配置-SprignSecurity安全"><a href="#配置-SprignSecurity安全" class="headerlink" title="配置 SprignSecurity安全"></a>配置 <code>SprignSecurity</code>安全</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="comment">// 开启web安全</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 配置安全</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .requestMatchers (EndpointRequest.toAnyEndpoint())  .permitAll()</span><br><span class="line">                <span class="comment">// 释放公钥地址和api-docs地址</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/rsa/publicKey&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/v2/api-docs&quot;</span>).permitAll()</span><br><span class="line">                .anyRequest().authenticated();  <span class="comment">// 所有请求认证</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 身份认证器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密器  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="配置token内容增强器"><a href="#配置token内容增强器" class="headerlink" title="配置token内容增强器"></a>配置token内容增强器</h5><blockquote><p>为什么需要这个 ？？ </p><p><code>SpringSecurity OAuth2</code> 生成的token 中不能添加字段 所以使用token内容增强器</p><p>增加token信息  多携带信息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtTokenEnhancer</span> <span class="keyword">implements</span> <span class="title">TokenEnhancer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OAuth2AccessToken <span class="title">enhance</span><span class="params">(OAuth2AccessToken accessToken, OAuth2Authentication authentication)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        SecurityUser securityUser = (SecurityUser) authentication.getPrincipal();</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; info = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把用户ID设置到JWT中</span></span><br><span class="line">        info.put(<span class="string">&quot;id&quot;</span>, securityUser.getId());</span><br><span class="line"></span><br><span class="line">        info.put(<span class="string">&quot;client_id&quot;</span>,securityUser.getClientId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// OAuth2AccessToken 这个是接口  所以只能强转</span></span><br><span class="line">        ((DefaultOAuth2AccessToken) accessToken).setAdditionalInformation(info);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> accessToken;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="定义消息常量"><a href="#定义消息常量" class="headerlink" title="定义消息常量"></a>定义消息常量</h5><p>便于统一定制 消息返回提示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageConstant</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOGIN_SUCCESS = <span class="string">&quot;登录成功!&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USERNAME_PASSWORD_ERROR = <span class="string">&quot;用户名或密码错误!&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CREDENTIALS_EXPIRED = <span class="string">&quot;该账户的登录凭证已过期，请重新登录!&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACCOUNT_DISABLED = <span class="string">&quot;该账户已被禁用，请联系管理员!&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACCOUNT_LOCKED = <span class="string">&quot;该账号已被锁定，请联系管理员!&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACCOUNT_EXPIRED = <span class="string">&quot;该账号已过期，请联系管理员!&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PERMISSION_DENIED = <span class="string">&quot;没有访问权限，请联系管理员!&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、接口"><a href="#3、接口" class="headerlink" title="3、接口"></a>3、接口</h4><h5 id="1、自定义获取token接口"><a href="#1、自定义获取token接口" class="headerlink" title="1、自定义获取token接口"></a>1、自定义获取token接口</h5><p>通过需要安全验证的接口， 通过远程调用这个接口进行验证返回token</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;AuthController&quot;, description = &quot;认证中心登录认证&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/oauth&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TokenEndpoint tokenEndpoint;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;Oauth2获取token&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;grant_type&quot;, value = &quot;授权模式&quot;, required = true),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;client_id&quot;, value = &quot;Oauth2客户端ID&quot;, required = true),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;client_secret&quot;, value = &quot;Oauth2客户端秘钥&quot;, required = true),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;refresh_token&quot;, value = &quot;刷新token&quot;),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;username&quot;, value = &quot;登录用户名&quot;),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;password&quot;, value = &quot;登录密码&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/token&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Oauth2TokenDto&gt; <span class="title">postAccessToken</span><span class="params">(<span class="meta">@ApiIgnore</span> Principal principal, <span class="meta">@ApiIgnore</span> <span class="meta">@RequestParam</span> Map&lt;String, String&gt; parameters)</span> <span class="keyword">throws</span> HttpRequestMethodNotSupportedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建token</span></span><br><span class="line">        OAuth2AccessToken oAuth2AccessToken = tokenEndpoint.postAccessToken(principal, parameters).getBody();</span><br><span class="line"></span><br><span class="line">        Oauth2TokenDto oauth2TokenDto = Oauth2TokenDto.builder()</span><br><span class="line">                .token(oAuth2AccessToken.getValue())</span><br><span class="line">                .refreshToken(oAuth2AccessToken.getRefreshToken().getValue())</span><br><span class="line">                .expiresIn(oAuth2AccessToken.getExpiresIn())</span><br><span class="line">                .tokenHead(AuthConstant.JWT_TOKEN_PREFIX).build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> CommonResult.success(oauth2TokenDto);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、接口返回参数类"><a href="#2、接口返回参数类" class="headerlink" title="2、接口返回参数类"></a>2、接口返回参数类</h5><h6 id="定义-Oauth2Token返回参数"><a href="#定义-Oauth2Token返回参数" class="headerlink" title="定义 Oauth2Token返回参数"></a>定义 <code>Oauth2Token</code>返回参数</h6><p>便于返回统一格式Token</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">@EqualsAndHashCode(callSuper = false)</span><br><span class="line">@Builder</span><br><span class="line">public class Oauth2TokenDto &#123;</span><br><span class="line">    @ApiModelProperty(&quot;访问令牌&quot;)</span><br><span class="line">    private String token;</span><br><span class="line">    @ApiModelProperty(&quot;刷令牌&quot;)</span><br><span class="line">    private String refreshToken;</span><br><span class="line">    @ApiModelProperty(&quot;访问令牌头前缀&quot;)</span><br><span class="line">    private String tokenHead;</span><br><span class="line">    @ApiModelProperty(&quot;有效时间（秒）&quot;)</span><br><span class="line">    private int expiresIn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3、获取公钥"><a href="#3、获取公钥" class="headerlink" title="3、获取公钥"></a>3、获取公钥</h5><p>通过接口获取公钥</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyPairController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KeyPair keyPair;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/rsa/publicKey&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 读取公钥  转换成Json 返回</span></span><br><span class="line">        RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();</span><br><span class="line">        RSAKey key = <span class="keyword">new</span> RSAKey.Builder(publicKey).build();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JWKSet(key).toJSONObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、自定义登录逻辑"><a href="#4、自定义登录逻辑" class="headerlink" title="4、自定义登录逻辑"></a>4、自定义登录逻辑</h4><h5 id="1、UserServiceImpl"><a href="#1、UserServiceImpl" class="headerlink" title="1、UserServiceImpl"></a>1、<code>UserServiceImpl</code></h5><p>通过实现<code>UserDetailService</code>进行自定义<code>sercurity</code>的登录逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="comment">// 通过远程接口进行访问</span></span><br><span class="line">    <span class="keyword">private</span> UmsAdminService adminService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="comment">// 通过远程接口进行调用</span></span><br><span class="line">    <span class="keyword">private</span> UmsMemberService memberService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取服务端id</span></span><br><span class="line">        String clientId = request.getParameter(<span class="string">&quot;client_id&quot;</span>);</span><br><span class="line">        <span class="comment">// 统一封装参数</span></span><br><span class="line">        UserDto userDto;</span><br><span class="line">        <span class="comment">// 检验是不是后台客户端</span></span><br><span class="line">        <span class="keyword">if</span>(AuthConstant.ADMIN_CLIENT_ID.equals(clientId))&#123;</span><br><span class="line">            <span class="comment">// 调用后台的接口查询</span></span><br><span class="line">            userDto = adminService.loadUserByUsername(username);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 调用前台的接口查询</span></span><br><span class="line">            userDto = memberService.loadUserByUsername(username);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (userDto==<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 表示用户名和密码错误</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(MessageConstant.USERNAME_PASSWORD_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将clientId 加入参数中</span></span><br><span class="line">        userDto.setClientId(clientId);</span><br><span class="line">        <span class="comment">// 添加</span></span><br><span class="line">        SecurityUser securityUser = <span class="keyword">new</span> SecurityUser(userDto);</span><br><span class="line">        <span class="comment">// 检验账号是否已经开启</span></span><br><span class="line">        <span class="keyword">if</span> (!securityUser.isEnabled()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> DisabledException(MessageConstant.ACCOUNT_DISABLED);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!securityUser.isAccountNonLocked()) &#123;    <span class="comment">// 检验是否被锁定</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockedException(MessageConstant.ACCOUNT_LOCKED);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!securityUser.isAccountNonExpired()) &#123;   <span class="comment">// 检验账号是否过期</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AccountExpiredException(MessageConstant.ACCOUNT_EXPIRED);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!securityUser.isCredentialsNonExpired()) &#123;  <span class="comment">// 检验账号凭证是否已经过期</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CredentialsExpiredException(MessageConstant.CREDENTIALS_EXPIRED);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> securityUser;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、SecurityUser"><a href="#2、SecurityUser" class="headerlink" title="2、SecurityUser"></a><code>2、SecurityUser</code></h5><p>使用与参数列表  <code>SecurityUser</code> 和 <code>UserServiceImpl</code>是security安全的俩个核心</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">public class SecurityUser implements UserDetails &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * ID</span><br><span class="line">     */</span><br><span class="line">    private Long id;</span><br><span class="line">    /**</span><br><span class="line">     * 用户名</span><br><span class="line">     */</span><br><span class="line">    private String username;</span><br><span class="line">    /**</span><br><span class="line">     * 用户密码</span><br><span class="line">     */</span><br><span class="line">    private String password;</span><br><span class="line">    /**</span><br><span class="line">     * 用户状态</span><br><span class="line">     */</span><br><span class="line">    private Boolean enabled;</span><br><span class="line">    /**</span><br><span class="line">     * 登录客户端ID</span><br><span class="line">     */</span><br><span class="line">    private String clientId;</span><br><span class="line">    /**</span><br><span class="line">     * 权限数据</span><br><span class="line">     */</span><br><span class="line">    private Collection&lt;SimpleGrantedAuthority&gt; authorities;</span><br><span class="line"></span><br><span class="line">    public SecurityUser() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SecurityUser(UserDto userDto) &#123;</span><br><span class="line">        this.setId(userDto.getId());</span><br><span class="line">        this.setUsername(userDto.getUsername());</span><br><span class="line">        this.setPassword(userDto.getPassword());</span><br><span class="line">        this.setEnabled(userDto.getStatus() == 1);</span><br><span class="line">        this.setClientId(userDto.getClientId());</span><br><span class="line">        if (userDto.getRoles() != null) &#123;</span><br><span class="line">            authorities = new ArrayList&lt;&gt;();</span><br><span class="line">            userDto.getRoles().forEach(item -&gt; authorities.add(new SimpleGrantedAuthority(item)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        return this.authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return this.password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getUsername() &#123;</span><br><span class="line">        return this.username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean isAccountNonExpired() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean isAccountNonLocked() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean isCredentialsNonExpired() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean isEnabled() &#123;</span><br><span class="line">        return this.enabled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结 ： <code>Auth</code>认证服务 通过暴露<code>/oauth/token</code>接口，让需要认真的接口远程调用进行认证  </p>]]></content>
    
    
    
    <tags>
      
      <tag>project</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaJvm和JMM</title>
    <link href="/2021/06/16/JavaJVM%E5%92%8CJMM/"/>
    <url>/2021/06/16/JavaJVM%E5%92%8CJMM/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>JVM(Java虚拟机的运行时区域)  和 JMM(Java内存模型) 有什么关系 </p><blockquote><p>JMM 和  Java并发编程有关  </p></blockquote><h2 id="JMM-是什么"><a href="#JMM-是什么" class="headerlink" title="JMM 是什么"></a>JMM 是什么</h2><ul><li>JMM是一种符合内存规范的, 屏蔽了各种硬件和操作系统的访问差异的, 保证了Java程序在各种平台对内存访问都能保证效果一致的机制及规范</li><li>Java内存模型规定了<strong>所有的变量</strong>都存储在主内存中, 每条线程还有自己的工作内存, 线程的工作内存中保存了该线程中是<strong>用到的变量的主内存副本拷贝</strong>, 线程对变量的所有操作都必须在工作内存中进行, 不能直接读写主内存。不同的线程之间也无法直接访问对方工作内存中的变量, 线程间变量的传递均需要自己的共工作内存和主存之间进行数据同步进行</li><li>JMM就作用于工作内存和主内存之间数据同步过程。他规定了如何做数据同步以及什么时候做数据同步。</li></ul><h2 id="JMM-的主要作用-以及实现方式-解决了那些问题"><a href="#JMM-的主要作用-以及实现方式-解决了那些问题" class="headerlink" title="JMM 的主要作用  以及实现方式 解决了那些问题"></a>JMM 的主要作用  以及实现方式 解决了那些问题</h2><p><img src="/2021/06/16/JavaJVM%E5%92%8CJMM/image-20210616092723877.png" alt="image-20210616092723877"></p><p>JMM是一种规范，目的是<strong>解决</strong>由于多线程通过共享内存进行通信时，储存在本地内存的<strong>数据不一致</strong></p><p>、编译器会对<strong>代码指令重排序</strong>、处理器会对<strong>代码乱序执行</strong>等带来的问题</p><p>原子性 ：</p><blockquote><p><em>即一个操作或者多个操作</em> <em>要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。</em></p></blockquote><p>​        Java中可以使用<code>synchronized </code>来保证方法和代码内的操作是原子性的 </p><p>​        自Jdk1.5之后提供了一个<code>Lock</code>(使用的是实现类)包 可以保证方法和代码内的操作都是原子性的</p><p> 而且俩者都是可重入锁 ？ </p><blockquote><p>解答文档<a href="https://mp.weixin.qq.com/s/R7Fu1HDW3N1pl1c9VJ2T5Q">https://mp.weixin.qq.com/s/R7Fu1HDW3N1pl1c9VJ2T5Q</a></p></blockquote><p>有序性 ： 即程序执行的顺序按照代码的先后顺序执行。</p><p><code>volatile</code>关键字会禁止指令重排。<code>synchronized</code>关键字保证同一时刻只允许一条线程操作。</p><p>可见性：</p><blockquote><p>可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</p></blockquote><p>Java中的<code>volatile</code>关键字提供了一个功能，那就是被其修饰的变量在被修改后可以立即同步到主内存，被其修饰的变量在每次是用之前都从主内存刷新。因此，可以使用<code>volatile</code>来保证多线程操作时变量的可见性。</p><p>除了<code>volatile</code>，Java中的<code>synchronized</code>和<code>final</code>两个关键字也可以实现可见性。只不过实现方式不同，这里不再展开了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>JMM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSeRelearn</title>
    <link href="/2021/06/15/JavaSeRelearn/"/>
    <url>/2021/06/15/JavaSeRelearn/</url>
    
    <content type="html"><![CDATA[<h1 id="javaSe-复习"><a href="#javaSe-复习" class="headerlink" title="javaSe  复习"></a>javaSe  复习</h1><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>java 数据类型的取值范围 </p><blockquote><p>byte 字节型 -128～127 -2^7～2^7-1 1字节</p><p>short 短整型 -32768～32767 -2^15～2^15-12字节</p><p>int 整型 -2147483648～2147483647 -2^31～2^31-1 4字节</p><p>long 长整型 -9223372036854775808～9223372036854775807 -2^63～2^-1 8字节</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> i = <span class="number">127</span>;</span><br><span class="line"><span class="keyword">long</span> s = <span class="number">1000L</span>;</span><br><span class="line"><span class="keyword">long</span> l = s - i;</span><br><span class="line">System.out.println(l);</span><br></pre></td></tr></table></figure><blockquote><p>当容量小的数据类型与容量大的数据类型的变量做运算时, 结果会自动提升为容量大的数据类型</p></blockquote><p>位运算符 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【特别说明的】</span><br><span class="line">1. 位运算符操作的都是整型的数据</span><br><span class="line">2. &lt;&lt; ：在一定范围内，每向左移1位，相当于 * 2</span><br><span class="line">&gt;&gt; :在一定范围内，每向右移1位，相当于 / 2</span><br></pre></td></tr></table></figure><p>流程控制 </p><p>switch 语法 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line"><span class="keyword">case</span> 常量<span class="number">1</span>:</span><br><span class="line">执行语句<span class="number">1</span>;</span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="keyword">case</span> 常量<span class="number">2</span>:</span><br><span class="line">执行语句<span class="number">2</span>;</span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">执行语句n;</span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组数据类型 </p><p>数组的特点</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 1数组是序排列的</span><br><span class="line"><span class="bullet">*</span> 2数组属于引用数据类型的变量。数组的元素，既可以是基本数据类型，也可以是引用数据类型</span><br><span class="line"><span class="bullet">*</span> 3创建数组对象会在内存中开辟一整块连续的空间</span><br><span class="line"><span class="bullet">*</span> 4数组的长度一旦确定，就不能修改。</span><br></pre></td></tr></table></figure><p>数组的创建方式</p><ol><li><p>直接声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[]  array;   </span><br></pre></td></tr></table></figure></li><li><p>静态初始化： 数组初始化和数组元素赋值同时进行 </p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int[] array = &#123;1,2 ,3, 4&#125;;</span><br></pre></td></tr></table></figure></li><li><p>动态初始化：数组的初始化和数组元素的赋值操作分开进行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明数组时 指定长度 默认数组的所有元素初始化为null </span></span><br><span class="line">String[] strings = <span class="keyword">new</span> String[<span class="number">5</span>];</span><br></pre></td></tr></table></figure></li></ol><p>‘ Arrays 工具类的使用’</p><blockquote><p>boolean equals(int[] a,int[] b)  :判断两个数组是否相等。<br>String toString(int[] a)  :输出数组信息。<br>void fill(int[] a,int val)  :将指定值填充到数组之中<br>void sort(int[] a)  :对数组进行排序<br>int binarySearch(int[] a,int key) :  从数组中查找key    </p></blockquote><h3 id="对象导论"><a href="#对象导论" class="headerlink" title="对象导论"></a>对象导论</h3><p>理解”<strong>万事万物皆对象</strong>“  </p><p>1.在Java语言范畴中，我们都将功能、结构等封装到类中，通过类的实例化，来调用具体的功能结构</p><ul><li><blockquote><p>Scanner,String等</p></blockquote></li><li><blockquote><p>文件：File</p></blockquote></li><li><blockquote><p>网络资源：URL</p></blockquote></li></ul><p>2.涉及到Java语言与前端<strong>Html</strong>、后端的数据库交互时<strong>，前后端的结构在Java层面交互时</strong>，都体现为<strong>类、对象</strong>。</p><p>类的属性和局部变量的不同以及差异</p><blockquote><p>对比：属性  vs  局部变量</p><p>1.相同点：</p><ul><li><pre><code>    1.1  定义变量的格式：数据类型  变量名 = 变量值</code></pre></li><li><pre><code>    1.2 先声明，后使用</code></pre></li><li><pre><code>    1.3 变量都其对应的作用域 </code></pre></li></ul><p>2.不同点：<br>       2.1 在类中声明的位置的不同</p><ul><li><pre><code>    属性：直接定义在类的一对&#123;&#125;内</code></pre></li><li><pre><code>    局部变量：声明在方法内、方法形参、代码块内、构造器形参、构造器内部的变量</code></pre></li></ul><p> 2.2 关于权限修饰符的不同</p><ul><li><pre><code>    属性：可以在声明属性时，指明其权限，使用权限修饰符。</code></pre></li><li><pre><code>    常用的权限修饰符：private、public、缺省、protected  ---&gt;封装性</code></pre></li><li><pre><code>    目前，大家声明属性时，都使用缺省就可以了。</code></pre></li><li><pre><code>    局部变量：不可以使用权限修饰符。</code></pre></li></ul><p> 2.3 默认初始化值的情况：</p><ul><li><pre><code>    属性：类的属性，根据其类型，都默认初始化值。</code></pre></li><li><pre><code>    整型（byte、short、int、long：0）</code></pre></li><li><pre><code>    浮点型（float、double：0.0）</code></pre></li><li><pre><code>    字符型（char：0  （或&#39;\u0000&#39;））</code></pre></li><li><pre><code>    布尔型（boolean：false）</code></pre></li></ul><ul><li><pre><code>        引用数据类型（类、数组、接口：null）</code></pre></li><li><pre><code>        局部变量：没默认初始化值。</code></pre></li><li><pre><code>        意味着，我们在调用局部变量之前，一定要显式赋值。</code></pre></li><li><pre><code>        特别地：形参在调用时，我们赋值即可。</code></pre></li></ul><p> 2.4 在内存中加载的位置：</p><ul><li><pre><code>    属性：加载到**堆空间**中   （非static）</code></pre></li><li><pre><code>    局部变量：加载到操作数栈</code></pre></li></ul></blockquote><h4 id="为什么-需要封装"><a href="#为什么-需要封装" class="headerlink" title="为什么 需要封装"></a>为什么 需要封装</h4><blockquote><p>我们程序设计追求“高内聚，低耦合”。</p><p>高内聚 ：<strong>类的内部数据操作细节自己完成，不允许外部干涉；</strong><br>低耦合 ：<strong>仅对外暴露少量的方法用于使用。</strong></p></blockquote><p>封装概念以及思想</p><blockquote><p>隐藏对象内部的复杂性，只对外公开简单的接口。</p><p>便于外界调用，从而提高系统的可扩展性、可维护性。</p><p>通俗的说，把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。</p></blockquote><p>封装的具体的代码实现</p><ul><li><blockquote><p>将类的属性xxx私化(private),同时，提供公共的(public)方法来获取(getXxx)和设置(setXxx)此属性的值</p></blockquote></li><li><blockquote><p>不对外暴露的私有的方法</p></blockquote></li><li><blockquote><p>单例模式（将构造器私有化）****</p></blockquote></li><li><blockquote><p>如果不希望类在包外被调用，可以将类设置为缺省的。</p></blockquote></li></ul><p>java的权限修饰符 </p><blockquote><p>private &lt;  缺省 &lt; protected &lt; public</p></blockquote><p>四个属性修饰的范围 </p><blockquote><p>4种权限都可以用来修饰<strong>类的内部结构</strong>：<strong>属性、方法、构造器、内部类</strong></p></blockquote><blockquote><p>修饰类的话，只能使用：<strong>缺省、public</strong></p></blockquote><h4 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h4><blockquote><p>2.使用说明：</p><ul><li>1.如果没显式的定义类的构造器的话，则系统默认提供一个<strong>空参的构造器</strong></li><li>2.定义构造器的格式：<strong>权限修饰符  类名(形参列表){}</strong></li><li>3.一个类中定义的多个构造器，<strong>彼此构成重载</strong></li><li>4.一旦我们显式的定义了类的构造器之后，<strong>系统就不再提供默认的空参构造器</strong></li><li>5.一个类中，至少<strong>会有一个构造器。</strong></li></ul></blockquote><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>// 面向对象三大特性  ：  封装  继承  多态 </p><ul><li>不使用继承前的代码 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> Integer age;</span><br><span class="line">    <span class="keyword">public</span> Date   birthDate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String  <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name + age + birthDate);</span><br><span class="line">        <span class="keyword">return</span>  name + age + birthDate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 学生类 class Student&#123;    public String name;    public Integer age;    public Date   birthDate;    public String schoolName;    public String  getInfo()&#123;        System.out.println(name + age + birthDate);        return  name + age + birthDate;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p>使用继承之后的代码 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明父类class People&#123;    public String name;    public Integer age;    public Date   birthDate;    public String  getInfo()&#123;        System.out.println(name + age + birthDate);        return  name + age + birthDate;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 学生类class Student extends People&#123;    public String schoolName;&#125;</span></span><br></pre></td></tr></table></figure><p>通过上述的代码：  ——&gt; 得出的结论为 ：   继承可以减少代码冗余     提高可复用性</p></li></ul><p>  作用：</p><blockquote><p>继承的出现减少了代码冗余   提高了代码的复用性。<br>继承的出现，更有利于功能的扩展。<br>继承 的出现让类与类之间产生了 关系 ，提供了多态的 前提 。</p><blockquote><p>注意：<strong>不要 仅为了获取其他类中某个功能而去继承</strong></p></blockquote></blockquote><p>  为什么要有继承 ？？？</p><blockquote><p>多个类中存在<strong>相同属性和行为</strong>时，将这些内容抽取到单独一个类中，<br>那么<strong>多个类无需再定义这些属性和行为</strong>，只要继承那个类即可。</p></blockquote><p>​    </p><p>子类是不是能操作父类的全部的数据呢 ？？ </p><blockquote><p>不是， 子类不能直接访问父类私有的属性以及方法</p></blockquote><p>java是不是属于多继承呢 ？？ </p><blockquote><p>java 是单继承   一个子类只能有一个父类    一个父类可以有多个子类</p></blockquote><h4 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h4><p>子类重写父类的定义：：</p><blockquote><p>在子类中可以根据需要对从<strong>父类中继承来的方法进行改造</strong> 也称<br>为方法 的 重置、覆盖 。在程序执行时，<strong>子类的方法将覆盖父类的方法。</strong>  </p></blockquote><p>注意事项：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 子类与父类中同名同参数的方法必须同时声明 为  非static的 (即为重写)，或者同时声明 为static 的不是重写 。因为 static方法是属于类的，子类无法覆盖父类的方法。</span></span><br></pre></td></tr></table></figure><p>要求</p><ol><li><p>子类重写的方法 必须和父类被重写的方法 具有<strong>相同的 方法名称、 参数 列表</strong></p></li><li><p>子类<strong>重写的方法的返回值类型</strong>不能大于   <strong>父类被重写的方法的返回值类型</strong></p></li><li><p>子类<strong>重写的方法使用的访问权限</strong> 不能小于 父类被重写的方法的访问权限</p><ol><li><blockquote><p>子类<strong>不能重写父类中声明为 private 权限的方法</strong></p></blockquote></li></ol></li><li><p>子类<strong>方法抛出的异常</strong>不能大于<strong>父类被重写方法的异常</strong></p></li></ol><p>问题： 重写和重载的区别 :</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 方法的重写Overriding和重载Overloading是Java多态性的不同表现。2. 重写Overriding是父类与子类之间多态性的一种表现，3. 重载Overloading是一个类中多态性的一种表现。4. 如果在子类中定义某方法与其父类有相同的名称和参数，我们说该方法被重写 (Overriding)。子类的对象使用这个方法时，将调用子类中的定义，对它而言，父类中的定义如同被&quot;屏蔽&quot;了。5. 如果在一个类中定义了多个同名的方法，它们或有不同的参数个数或有不同的参数类型，则称为方法的重载(Overloading)。</span><br></pre></td></tr></table></figure><h4 id="super关键词"><a href="#super关键词" class="headerlink" title="super关键词"></a>super关键词</h4><blockquote><p><img src="/2021/06/15/JavaSeRelearn/image-20210411184500602.png" alt="image-20210411184500602"></p></blockquote><p>this  和  super的区别</p><blockquote><p><img src="/2021/06/15/JavaSeRelearn/image-20210411184639758.png" alt="image-20210411184639758"></p></blockquote><p>面试题：  ==  和  equasl 的区别 </p><blockquote><p>== 既可以比较 地址值和数据值    </p><p>对于基本类型比较的是值   对于引用类型比较的就是地址</p><p>具体 要看自定义类里有没有 重写 Object 的 equals 方法来 判断。</p><p>通常情况下，重写 equals 方法，会比较类中的相应属性是否都相等。</p></blockquote><h3 id="字符串和基本数据类型之间的互相转换"><a href="#字符串和基本数据类型之间的互相转换" class="headerlink" title="字符串和基本数据类型之间的互相转换"></a>字符串和基本数据类型之间的互相转换</h3><p><strong>String 转换成基本数据类型的方法</strong></p><p><strong>基本数据类型转换String</strong> </p><p><img src="/2021/06/15/JavaSeRelearn/image-20210414104116418.png" alt="image-20210414104116418"></p><h3 id="interface-gt-abstract"><a href="#interface-gt-abstract" class="headerlink" title="interface   -&gt;  abstract"></a>interface   -&gt;  abstract</h3><p>接口和抽象类有什么不同点和共同点</p><p>相同点：</p><blockquote><p>不能实例化    -    都可以包含抽象方法</p></blockquote><p> 不同点：</p><blockquote><p>类： 单继承      接口： 多继承  </p><p>类与接口 ： 多实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">interfaceLearn</span>   <span class="keyword">extends</span> <span class="title">Service</span>  <span class="keyword">implements</span> <span class="title">Dao</span></span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="comment">// 接口可以调用接口的静态方法        Dao.tses(new Object());        // 默认方法 通过接口的实现类进行调用  如果接口的实现复写了改方法 就调用接口实现者的方法        Dao dao = new interfaceLearn();        // 调用默认方法        // 调用的是抽象类的方法   执行类有先的原则        dao.test();        /**         *  service -&gt;  执行         * java.lang.Object@1b6d3586         * Service-&gt;   test         */    &#125;&#125;interface Dao&#123;    // 结构中可以声明静态方法    static void tses(Object o)&#123;        System.out.println(o);    &#125;    // 接口中的默认方法    default void  test()&#123;        System.out.println(&quot;interface  -&gt; default  -&gt;   test&quot;);    &#125;&#125;abstract class Service&#123;    // 抽象类中声明静态代码块    static &#123;        System.out.println(&quot; service -&gt;  执行&quot;);    &#125;    // 定义普通方法     public void  test()&#123;         System.out.println(&quot;Service-&gt;   test&quot;);     &#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="java多线程"><a href="#java多线程" class="headerlink" title="java多线程"></a>java多线程</h3><p>疑问 ： </p><ul><li>线程声明周期 ：</li></ul><p><img src="/2021/06/15/JavaSeRelearn/image-20210414155458289.png" alt="image-20210414155458289"></p><ul><li> 创建多线程有多少方法</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 第一种：  通过继承Thread类然后   调用start()进行创建# 第二种： 通过继承runnable()    接口进行创建# 第三种： 通过继承callable 接口进行创建   （带有泛型和返回值）# 第四种： 通过线程池创建</span></span><br></pre></td></tr></table></figure><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="comment">// 使用线程        new MyThread().start();        // 使用runnable 实现接口        new Thread(new RunnableLearn()).start();        // 实现 callable接口 注意这个接口需要使用别的扩展类进行创建线程        new Thread(new FutureTask&lt;&gt;(new CallableLearn())).start();        // 使用线程池创建   创建线程池        System.out.println(&quot;线程池执行 = 》   》》》 》》》   》》&quot;);        ExecutorService executorService = Executors.newFixedThreadPool(10);        executorService.execute(new MyThread());        executorService.execute(new RunnableLearn());        // 执行 callable接口        executorService.execute(new FutureTask&lt;&gt;(new CallableLearn()));        executorService.shutdown();    &#125;&#125;// 创建线程第一种方法class MyThread extends Thread&#123;    @Override    public void run() &#123;        System.out.println(&quot;MyThread  -&gt;  run&quot;);    &#125;&#125;// 第二种创建线程方法  通过 runnable接口class RunnableLearn implements Runnable&#123;    @Override    public void run() &#123;        System.out.println(&quot;runnable  -&gt;  run&quot;);    &#125;&#125;// 第三种方式通过实现callable 接口  该接口带有泛型  泛型就表示call方法返回值class CallableLearn implements Callable&lt;Object&gt; &#123;    @Override    public Object call() throws Exception &#123;        System.out.println(&quot; callable  -&gt;  run&quot;);        return new String(&quot;callable run&quot;);    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>Java里面线程池的<strong>顶级接口是Executor</strong>，但是<strong>严格意义上讲Executor并不是一个线程池，而只是一个执行线程的工具。</strong>真正的<strong>线程池接口是ExecutorService。</strong></p><p>线程池有几种 ？    四种</p><p>分别是什么   功能以及优缺点？ </p><ul><li><blockquote><h1 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a>newCachedThreadPool</h1><p>创建一个可根据需要创建新线程的线程池，但是在以前构造的线程可用时将重用它们。对于执行很多短期异步任务的程序而言，这些线程池通常可提高程序性能。调用 execute 将重用以前构造的线程（如果线程可用）。如果现有线程没有可用的，则创建一个新线程并添加到池中。终止并从缓存中移除那些已有 60 秒钟未被使用的线程。因此，长时间保持空闲的线程池不会使用任何资源。</p></blockquote></li><li><blockquote><h1 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h1><p>创建一个可重用固定线程数的线程池，以共享的无界队列方式来运行这些线程。在任意点，在大多数nThreads 线程会处于处理任务的活动状态。如果在所有线程处于活动状态时提交附加任务，则在有可用线程之前，附加任务将在队列中等待。如果在关闭前的执行期间由于失败而导致任何线程终止，那么一个新线程将代替它执行后续的任务（如果需要）。在某个线程被显式地关闭之前，池中的线程将一直存在。</p></blockquote></li></ul><ul><li><blockquote><h1 id="newScheduledThreadPool"><a href="#newScheduledThreadPool" class="headerlink" title="newScheduledThreadPool"></a>newScheduledThreadPool</h1><p>创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行。</p></blockquote></li><li><blockquote><h1 id="newSingleThreadExecutor"><a href="#newSingleThreadExecutor" class="headerlink" title="newSingleThreadExecutor"></a>newSingleThreadExecutor</h1><p>Executors.newSingleThreadExecutor()返回一个线程池（这个线程池只有一个线程）,这个线程池可以在线程死后（或发生异常时）重新启动一个线程来替代原来的线程继续执行下去！</p></blockquote></li></ul><h4 id="线程池-源码解析"><a href="#线程池-源码解析" class="headerlink" title="线程池 源码解析"></a><strong>线程池 源码解析</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">都是通过 <span class="keyword">new</span> ThreadPoolExecutor 进行创建的线程池     <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">2</span>,  <span class="comment">// 核心线程数 process + 1,   // 最大线程数 ==  电脑线程数 + 12L,   // 存活时间 TimeUnit.SECONDS,  // 时间单位new LinkedBlockingQueue&lt;&gt;(3),  // 创建长度为三的阻塞队列  Executors.defaultThreadFactory(),     //   默认线程工厂    //new ThreadPoolExecutor.AbortPolicy() // 出场默认中止策略    //new ThreadPoolExecutor.CallerRunsPolicy()   // 处理不掉的 任务返回给委派任务者    //new ThreadPoolExecutor.DiscardPolicy()  //  抛弃任务中的等待时间最长的任务，然后把当前任务加入队列中，尝试再次提交当前任务   不抛出异常    new ThreadPoolExecutor.DiscardOldestPolicy()   // 该策略默默丢弃一些无法处理的任务,不予任何处理也不抛出异常。如果允许任务丢失，这是最好的一种策略);</span></span><br></pre></td></tr></table></figure><h4 id="线程锁："><a href="#线程锁：" class="headerlink" title="线程锁："></a>线程锁：</h4><p>概念暂无 ：“</p><p>详情查看书籍 :   java重点总结</p><p>Start 和  run 方法的区别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start与run区别 1. start（）方法来启动线程，真正实现了多线程运行。这时无需等待run方法体代码执行完毕，可以直接继续执行下面的代码。2. 通过调用Thread类的start()方法来启动一个线程， 这时此线程是处于就绪状态， 并没有运行。 3. 方法run()称为线程体，它包含了要执行的这个线程的内容，线程就进入了运行状态，开始运行run函数当中的代码。 Run方法运行结束， 此线程终止。然后CPU再调度其它线程。</span><br></pre></td></tr></table></figure><h3 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h3><h4 id="String-类"><a href="#String-类" class="headerlink" title="String 类"></a>String 类</h4><p>源码分析： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span>    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span>          <span class="title">private</span> <span class="title">final</span> <span class="title">char</span> <span class="title">value</span>[]</span>;    <span class="comment">// String 是final修饰的， 是不能被修改的// 实现了 Serializable接口实现了序列化// 实现了Comparable接口  可以进行比较// String底层默认使用字符数组进行存储</span></span><br></pre></td></tr></table></figure><p>字符串实例方式  以及差异 </p><blockquote><p>第一种方式通过字符字面量进行创建</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String name = <span class="string">&quot;anzhen&quot;</span>; <span class="comment">// 直接创建在常量池    </span></span><br></pre></td></tr></table></figure><blockquote><p>第二种通过new  String 进行创建    </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String names = <span class="keyword">new</span> String(<span class="string">&quot;anzhen&quot;</span>);System.out.println(names == name); <span class="comment">// 比较地址值// 返回值为false</span></span><br></pre></td></tr></table></figure><p>请问new String() 开辟了 几块内存 </p><blockquote><p>两个: 一个是<strong>堆空间中new结构</strong>，另一个是<strong>char[]对应的常量池中的数据</strong>：”abc”</p></blockquote><p>创建过程如下： </p><blockquote><p>先在堆空间开辟对象，然后查找字符串常量池中查找传入的值  </p><p>如果字符串常量池中存在则把字符串常量地址复制给value</p></blockquote><p>检验如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">names = names.intern();   <span class="comment">// intern 将字符串的值推向常量池  如果常量池存在则把常量池对象地址赋值给变量System.out.println(names == name);  // 比较地址值</span></span><br></pre></td></tr></table></figure><p>字符串拼接：</p><blockquote><p>常量和常量拼接在字符串常量池   常量池不会存在相同的常量</p><p>只要<strong>其中一个是变量</strong>结果就在<strong>堆中</strong></p><p>如果拼接的字符串的结果调用了 <strong>intern()</strong> 方法， 返回值就在常量池中</p></blockquote><p>string 常用api </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span>：返回字符串的长度： return value.lengthchar <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span>： 返回某索引处的字符return value[index]<span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span>：判断是否是空字符串：return value.length </span>== 0<span class="function">String <span class="title">toLowerCase</span><span class="params">()</span>：使用默认语言环境，将 String 中的所字符转换为小写String <span class="title">toUpperCase</span><span class="params">()</span>：使用默认语言环境，将 String 中的所字符转换为大写String <span class="title">trim</span><span class="params">()</span>：返回字符串的副本，忽略前导空白和尾部空白<span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span>：比较字符串的内容是否相同<span class="keyword">boolean</span> <span class="title">equalsIgnoreCase</span><span class="params">(String anotherString)</span>：与equals方法类似，忽略大小写String <span class="title">concat</span><span class="params">(String str)</span>：将指定字符串连接到此字符串的结尾。 等价于用“+”<span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(String anotherString)</span>：比较两个字符串的大小String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex)</span>：返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串。String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span> ：返回一个新字符串，它是此字符串从beginIndex开始截取到<span class="title">endIndex</span><span class="params">(不包含)</span>的一个子字符串。<span class="keyword">boolean</span> <span class="title">endsWith</span><span class="params">(String suffix)</span>：测试此字符串是否以指定的后缀结束<span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String prefix)</span>：测试此字符串是否以指定的前缀开始<span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String prefix, <span class="keyword">int</span> toffset)</span>：测试此字符串从指定索引开始的子字符串是否以指定前缀开始<span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(CharSequence s)</span>：当且仅当此字符串包含指定的 <span class="keyword">char</span> 值序列时，返回 trueint <span class="title">indexOf</span><span class="params">(String str)</span>：返回指定子字符串在此字符串中第一次出现处的索引<span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str, <span class="keyword">int</span> fromIndex)</span>：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始<span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(String str)</span>：返回指定子字符串在此字符串中最右边出现处的索引<span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(String str, <span class="keyword">int</span> fromIndex)</span>：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索注：indexOf和lastIndexOf方法如果未找到都是返回-1替换：String <span class="title">replace</span><span class="params">(<span class="keyword">char</span> oldChar, <span class="keyword">char</span> newChar)</span>：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所 oldChar 得到的。String <span class="title">replace</span><span class="params">(CharSequence target, CharSequence replacement)</span>：使用指定的字面值替换序列替换此字符串所匹配字面值目标序列的子字符串。String <span class="title">replaceAll</span><span class="params">(String regex, String replacement)</span>：使用给定的 replacement 替换此字符串所匹配给定的正则表达式的子字符串。String <span class="title">replaceFirst</span><span class="params">(String regex, String replacement)</span>：使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。匹配:<span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String regex)</span>：告知此字符串是否匹配给定的正则表达式。切片：String[] <span class="title">split</span><span class="params">(String regex)</span>：根据给定正则表达式的匹配拆分此字符串。String[] <span class="title">split</span><span class="params">(String regex, <span class="keyword">int</span> limit)</span>：根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。</span></span><br></pre></td></tr></table></figure><p>String 和 基本数据类型转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// String --&gt; 基本数据类型、包装类：调用包装类的静态方法：parseXxx(str)// 基本数据类型、包装类 --&gt; String:调用String重载的valueOf(xxx)int age = 198;String strAge = String.valueOf(age);  // 基本数据类型和包装类转换字符串int i = Integer.parseInt(strAge);   // 字符串转基本数据类型System.out.println(i == age);   // trueSystem.out.println(strAge instanceof String); // true</span></span><br></pre></td></tr></table></figure><p>String 和 char[] 数据类型转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        String --&gt; char[]:调用String的toCharArray()//        char[] --&gt; String:调用String的构造器String name = &quot;anzhen&quot;;char[] chars = name.toCharArray();  // 转换成字符数组String s = new String(chars);  //  转换字符串System.out.println(s == name); // false  解释如下: 通过new的对象生成在堆里面System.out.println(s.intern() == name); // true</span></span><br></pre></td></tr></table></figure><p>String 和 byte[] 数据类型转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">编码：String --&gt; <span class="keyword">byte</span>[]:调用String的getBytes()解码：<span class="keyword">byte</span>[] --&gt; String:调用String的构造器编码：字符串 --&gt;字节  (看得懂 ---&gt;看不懂的二进制数据)解码：编码的逆过程，字节 --&gt; 字符串 （看不懂的二进制数据 ---&gt; 看得懂说明：解码时，要求解码使用的字符集必须与编码时使用的字符集一致，否则会出现乱码。String name = <span class="string">&quot;anzhen&quot;</span>;<span class="keyword">byte</span>[] bytes = name.getBytes(StandardCharsets.UTF_8);<span class="comment">// 设置标准字符集String s = new String(bytes);System.out.println(Arrays.toString(bytes));System.out.println(s);</span></span><br></pre></td></tr></table></figure><p>​    </p><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p>集合类的关系图</p><blockquote><p><img src="/2021/06/15/JavaSeRelearn/image-20210416205008922.png" alt="image-20210416205008922"></p></blockquote><p>接口中定义的方法</p><blockquote><p><img src="/2021/06/15/JavaSeRelearn/image-20210416205148905.png" alt="image-20210416205148905"></p></blockquote><p>collection 与 数组的转换 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">调用 toArray()</span><br></pre></td></tr></table></figure><p>数组  转换为  集合 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过  Arrays.asList()</span><br></pre></td></tr></table></figure><p>使用Collection集合存储对象，要求对象所属的类满足：</p><blockquote><p>向Collection接口的实现类的对象中添加数据obj时，要求obj所在类要重写equals().</p></blockquote><p>迭代器接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GOF给迭代器模式的定义为：提供一种方法访问一个容器(container)对象中各个元素，而又不需暴露该对象的内部细节。迭代器模式，就是为容器而生。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collection list = <span class="keyword">new</span> ArrayList();  <span class="comment">// 创建集合对象list.add(&quot;anzhne&quot;);list.add(&quot;age&quot;);list.add(11);Iterator iterator = list.iterator();// 获取拦截器while (iterator.hasNext())&#123;     // 判断是否下一个元素存在    System.out.println(iterator.next());      // 指针下移  进行输出&#125;</span></span><br></pre></td></tr></table></figure><p>collection 接口和  list接口主要的实现类</p><h5 id="List-接口以及实现类"><a href="#List-接口以及实现类" class="headerlink" title="List 接口以及实现类"></a>List 接口以及实现类</h5><p>|—-Collection接口：单列集合，用来存储一个一个的对象</p><ul><li>|—-List接口：存储序的、可重复的数据。  –&gt;“动态”数组,替换原的数组<ul><li><pre><code> |----ArrayList：作为List接口的主要实现类；线程不安全的，效率高；底层使用Object[] elementData存储</code></pre></li><li><pre><code> |----LinkedList：对于频繁的插入、删除操作，使用此类效率比ArrayList高；底层使用双向链表存储</code></pre></li><li><pre><code> |----Vector：作为List接口的古老实现类；线程安全的，效率低；底层使用Object[] elementData存储</code></pre></li></ul></li></ul><h6 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h6><p>底层源码解析</p><p>疑问1: new 的时候有没有分配大小？ </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用空参构造器的时候  创建的是this.elementData =      DEFAULTCAPACITY_EMPTY_ELEMENTDATA;  // 这个常量默认等于空只要调用add方法的时候才会创建长度为10的element数组</span></span><br></pre></td></tr></table></figure><p>特点： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">排列有序，可重复底层使用数组查询速度修改速度快  增加和删除慢线程不安全当容量不足时 arraylist的当前容量*<span class="number">1.5</span> + <span class="number">1</span></span><br></pre></td></tr></table></figure><h6 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LinkedList list = <span class="keyword">new</span> LinkedList(); 内部声明了Node类型的first和last属性，默认值为<span class="keyword">null</span>*      list.add(<span class="number">123</span>);<span class="comment">//将123封装到Node中，创建了Node对象。**      其中，Node定义为：体现了LinkedList的双向链表的说法private static class Node&lt;E&gt; &#123;    E item;    Node&lt;E&gt; next;    Node&lt;E&gt; prev;    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;        this.item = element;        this.next = next;        this.prev = prev;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>特点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">增加和删除快  但是查询和修改效率不高底层使用的是双向链表 有序的, 可重复的线程不安全</span><br></pre></td></tr></table></figure><h6 id="Vector-已经废用"><a href="#Vector-已经废用" class="headerlink" title="Vector: (已经废用)"></a>Vector: (已经废用)</h6><blockquote><p>Vector与ArrayList一样，也是通过数组实现的，不同的是它支持线程的同步，即某一时刻只有一个线程能够写Vector，避免多线程同时写而引起的不一致性，但实现同步需要很高的花费，因此，访问它比访问ArrayList慢。</p></blockquote><h5 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h5><p>set接口特性 ：</p><blockquote><p>无序性， 不可重复的元素</p></blockquote><p>子类 </p><h6 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h6><blockquote><p>底层是HashMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">// initial capacity (16) and load factor (0.75).public HashSet() &#123;   map = new HashMap&lt;&gt;();&#125;// 初始化默认长度是 16  加载因子是0.75</span></span><br></pre></td></tr></table></figure><p>无序排列 ， 元素不重复</p><p>存取速度快</p><p>HashSet通过hashCode值来确定元素在内存中的位置。一个hashCode位置上可以存放多个元素。</p></blockquote><h6 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h6><blockquote><p>无序排列 ， 元素不重复</p><p>底层实现：二叉树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="title">TreeSet</span><span class="params">()</span> </span>&#123;<span class="keyword">this</span>(<span class="keyword">new</span> TreeMap&lt;E,Object&gt;());&#125;</span><br></pre></td></tr></table></figure><p>可以自定义排序 </p></blockquote><h6 id="LinkedSet"><a href="#LinkedSet" class="headerlink" title="LinkedSet"></a>LinkedSet</h6><blockquote><p>采用hash表存储，并用双向链表记录插入顺序</p><p>内部是LinkedHashMap</p><p>默认容量和加载因子是 16 ， 0.75</p></blockquote><p>使用Set集合存储对象时， 注意事项</p><blockquote><p>HashSet/LinkedHashSet:</p><p>要求：</p><blockquote><p>向Set(主要指：HashSet、LinkedHashSet)中添加的数据，其所在的类一定要重写hashCode()和equals()</p></blockquote><blockquote><p>重写的hashCode()和equals()尽可能保持一致性：</p></blockquote><blockquote><p>相等的对象必须具有相等的散列码</p></blockquote><ul><li><p>   重写两个方法的小技巧：</p></li><li><p>   对象中用作 equals() 方法比较的 Field，</p></li><li><p>   都应该用来计算 hashCode 值。</p></li></ul><p>TreeSet:<br>1.自然排序中，比较两个对象是否相同的标准为：</p><blockquote><p>compareTo()返回0.不再是equals().</p></blockquote><p>2.定制排序中，比较两个对象是否相同的标准为：</p><blockquote><p>compare()返回0.不再是equals().</p></blockquote></blockquote><h5 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h5><p>子类： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap  HashTable  （线程安全）TreeMap (可排序)LinkHashMap（记录插入顺序）</span><br></pre></td></tr></table></figure><h6 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h6><blockquote><p>HashMap根据<strong>键的hashCode</strong>值存储数据，大多数情况下可以直接定位到它的值，因而具有很快的访问速度，但遍历顺序却是不确定的。 HashMap最多只允许一条记录的键为null，允许多条记录的值为null。<strong>HashMap非线程安全</strong>，即任一时刻可以有多个线程同时写HashMap，可能会导致数据的不一致。如果需要满足线程安全，可以用 <strong>Collections的synchronizedMap方法使HashMap具有线程安全的能力</strong>，或者使用<strong>ConcurrentHashMap。</strong></p></blockquote><p><img src="/2021/06/15/JavaSeRelearn/image-20210417151158049.png" alt="image-20210417151158049"></p><p>当单链表长度大于8时候  单链表变成红黑树</p><h6 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable:"></a>HashTable:</h6><blockquote><p>Hashtable是遗留类，很多映射的常用功能与HashMap类似，不同的是它承自Dictionary类，并且是<strong>线程安全</strong>的，任一时间只有一个线程能写Hashtable，<strong>并发性不如ConcurrentHashMap</strong>，因为<strong>ConcurrentHashMap引入了分段锁</strong>。Hashtable不建议在新代码中使用，不需要线程安全的场合可以用HashMap替换，需要线程安全的场合可以用ConcurrentHashMap替换。****</p></blockquote><h6 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h6><blockquote><p>TreeMap实现<strong>SortedMap接口</strong>，能够把<strong>它保存的记录根据键排序</strong>，默认是按键值的升序排序，也可以指定排序的比较器，当用Iterator遍历TreeMap时，得到的记录是排过序的。 如果使用排序的映射，建议使用TreeMap。 在使用TreeMap时，key必须实现Comparable接口或者在构造TreeMap传入自定义的Comparator，否则会在运行时抛出java.lang.ClassCastException类型的异常。</p></blockquote><h6 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap:"></a>LinkedHashMap:</h6><blockquote><p><strong>LinkedHashMap是HashMap的一个子类，保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的，也可以在构造时带参数，按照访问次序排序。</strong></p></blockquote><p>如何把线程不安全的集合类变得线程安全？？</p><blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;# 回答如下第一种方式 : ArrayList和HashMap都是线程不安全的，如果程序要求线程安全，我们可以将ArrayList、HashMap转换为线程安全的。使用synchronizedList(List list） 和 synchronizedMap(Map map）给集合类加锁# 第二种使用线程安全的集合类// 线程安全的集合类 arraylist线程安全类CopyOnWriteArrayList// map 集合线程安全类ConcurrentHashMap</span><br></pre></td></tr></table></figure></blockquote><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>集合中使用泛型和不使用泛型的区别</p><blockquote><p>任何类型都可以添加到集合中，类型不安全</p><p>读取出来的数据需要强转， 太过于繁琐</p></blockquote><p>集合泛型总结</p><blockquote><ul><li>① 集合接口或集合类在jdk5.0时都修改为带泛型的结构。</li></ul><ul><li> ② 在实例化集合类时，可以指明具体的泛型类型</li><li> ③ 指明完以后，在集合类或接口中凡是定义类或接口时，内部结构（比如：方法、构造器、属性等）使用到类的泛型的位置，都指定为实例化的泛型类型。</li><li> 比如：add(E e)  —&gt;实例化以后：add(Integer e)</li><li> ④ 注意点：泛型的类型必须是类，不能是基本数据类型。需要用到基本数据类型的位置，拿包装类替换</li><li> ⑤ 如果实例化时，没指明泛型的类型。默认类型为java.lang.Object类型。</li></ul></blockquote><h3 id="Class-反射"><a href="#Class-反射" class="headerlink" title="Class 反射"></a>Class 反射</h3><p>Class 反射概念  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Reflection（反射)是被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。<span class="comment"># 框架 = 反射 + 注解 + 设计模式。3.体会反射机制的“动态性”</span></span><br></pre></td></tr></table></figure><p>类加载过程：</p><blockquote><p>程序经过javac.exe命令以后，会生成一个或多个字节码文件(.class结尾)。接着我们使用java.exe命令对某个字节码文件进行解释运行。相当于将某个字节码文件加载到内存中。此过程就称为类的加载。加载到内存中的类，我们就称为运行时类，此运行时类，就作为Class的一个实例。</p><p>2.换句话说，Class的实例就对应着一个运行时类。</p><p>3.加载到内存中的运行时类，会缓存一定的时间。在此时间之内，我们可以通过不同的方式来获取此运行时类。</p></blockquote><p>获取class实例的四种方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过类名获取classClass&lt;Person&gt; personClass = Person.class;System.out.println(personClass.getClassLoader());  //  AppClassLoader// 通过对象获取classPerson person = new Person();Class&lt;? extends Person&gt; aClass = person.getClass(); // 获取class对象System.out.println(aClass.getName());  //  获取全类名// 调用Class的静态方法Class&lt;?&gt; person1 = Class.forName(&quot;com.anzhen.io.Person&quot;);System.out.println(person1);// 使用类加载器加载ClassLoader classLoader = ClassLearn.class.getClassLoader();Class&lt;?&gt; aClass1 = classLoader.loadClass(&quot;com.anzhen.io.Person&quot;);// 加载classSystem.out.println(aClass1);</span></span><br></pre></td></tr></table></figure><p>通过反射创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过类名获取classClass&lt;Person&gt; personClass = Person.class;// 通过反射获取对象Person person = personClass.newInstance();System.out.println(person);</span></span><br></pre></td></tr></table></figure><p>获取全部权限为public的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Field[] fields = personClass.getFields();<span class="comment">// 只能获取权限为public的for (Field field : fields) &#123;    System.out.println(field);&#125;</span></span><br></pre></td></tr></table></figure><p>获取全部属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Field[] declaredFields = personClass.getDeclaredFields();  <span class="comment">// 获取全部属性的信息 包括私有的（不包含父类的）for (Field declaredField : declaredFields) &#123;    System.out.println(declaredField);&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Person.class;<span class="comment">//getConstructors():获取当前运行时类中声明为public的构造器Constructor[] constructors = clazz.getConstructors();for(Constructor c : constructors)&#123;    System.out.println(c);&#125;System.out.println();//getDeclaredConstructors():获取当前运行时类中声明的所的构造器Constructor[] declaredConstructors = clazz.getDeclaredConstructors();for(Constructor c : declaredConstructors)&#123;System.out.println(c);&#125;// 获取父类Class superclass = clazz.getSuperclass();System.out.println(superclass);        // 获取父类泛型Type genericSuperclass = clazz.getGenericSuperclass();System.out.println(genericSuperclass);</span></span><br></pre></td></tr></table></figure><p>通过class 创建实例打开私有权限 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过类名获取classClass&lt;Person&gt; personClass = Person.class;// 通过反射获取对象Person person = personClass.newInstance();person.setName(&quot;anzhen&quot;);person.setAge(19);Field age = personClass.getDeclaredField(&quot;age&quot;);// 打开权限age.setAccessible(true);System.out.println(age.get(person));</span></span><br></pre></td></tr></table></figure><p>通过class 调用方法 和 静态方法</p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaSe</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
